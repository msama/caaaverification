/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.analysis;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPSpecs().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAFsmSpecs(AFsmSpecs node)
    {
        defaultIn(node);
    }

    public void outAFsmSpecs(AFsmSpecs node)
    {
        defaultOut(node);
    }

    public void caseAFsmSpecs(AFsmSpecs node)
    {
        inAFsmSpecs(node);
        if(node.getFsmSpec() != null)
        {
            node.getFsmSpec().apply(this);
        }
        outAFsmSpecs(node);
    }

    public void inAFsmSpec(AFsmSpec node)
    {
        defaultIn(node);
    }

    public void outAFsmSpec(AFsmSpec node)
    {
        defaultOut(node);
    }

    public void caseAFsmSpec(AFsmSpec node)
    {
        inAFsmSpec(node);
        if(node.getFsmName() != null)
        {
            node.getFsmName().apply(this);
        }
        if(node.getFsmState() != null)
        {
            node.getFsmState().apply(this);
        }
        if(node.getFsmInputAlpha() != null)
        {
            node.getFsmInputAlpha().apply(this);
        }
        if(node.getFsmStart() != null)
        {
            node.getFsmStart().apply(this);
        }
        if(node.getFsmForbidden() != null)
        {
            node.getFsmForbidden().apply(this);
        }
        if(node.getFsmTransition() != null)
        {
            node.getFsmTransition().apply(this);
        }
        if(node.getFsmTrigger() != null)
        {
            node.getFsmTrigger().apply(this);
        }
        if(node.getFsmPriority() != null)
        {
            node.getFsmPriority().apply(this);
        }
        if(node.getFsmContextTypes() != null)
        {
            node.getFsmContextTypes().apply(this);
        }
        if(node.getFsmContextVariables() != null)
        {
            node.getFsmContextVariables().apply(this);
        }
        if(node.getFsmPredicateAbbr() != null)
        {
            node.getFsmPredicateAbbr().apply(this);
        }
        if(node.getFsmConstraintPair() != null)
        {
            node.getFsmConstraintPair().apply(this);
        }
        outAFsmSpec(node);
    }

    public void inAFsmName(AFsmName node)
    {
        defaultIn(node);
    }

    public void outAFsmName(AFsmName node)
    {
        defaultOut(node);
    }

    public void caseAFsmName(AFsmName node)
    {
        inAFsmName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAFsmName(node);
    }

    public void inAFsmState(AFsmState node)
    {
        defaultIn(node);
    }

    public void outAFsmState(AFsmState node)
    {
        defaultOut(node);
    }

    public void caseAFsmState(AFsmState node)
    {
        inAFsmState(node);
        if(node.getState() != null)
        {
            node.getState().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFsmState(node);
    }

    public void inASingleStateList(ASingleStateList node)
    {
        defaultIn(node);
    }

    public void outASingleStateList(ASingleStateList node)
    {
        defaultOut(node);
    }

    public void caseASingleStateList(ASingleStateList node)
    {
        inASingleStateList(node);
        if(node.getStateAlpha() != null)
        {
            node.getStateAlpha().apply(this);
        }
        outASingleStateList(node);
    }

    public void inAScopeStateList(AScopeStateList node)
    {
        defaultIn(node);
    }

    public void outAScopeStateList(AScopeStateList node)
    {
        defaultOut(node);
    }

    public void caseAScopeStateList(AScopeStateList node)
    {
        inAScopeStateList(node);
        if(node.getStateScope() != null)
        {
            node.getStateScope().apply(this);
        }
        outAScopeStateList(node);
    }

    public void inASequence1StateList(ASequence1StateList node)
    {
        defaultIn(node);
    }

    public void outASequence1StateList(ASequence1StateList node)
    {
        defaultOut(node);
    }

    public void caseASequence1StateList(ASequence1StateList node)
    {
        inASequence1StateList(node);
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStateAlpha() != null)
        {
            node.getStateAlpha().apply(this);
        }
        outASequence1StateList(node);
    }

    public void inASequence2StateList(ASequence2StateList node)
    {
        defaultIn(node);
    }

    public void outASequence2StateList(ASequence2StateList node)
    {
        defaultOut(node);
    }

    public void caseASequence2StateList(ASequence2StateList node)
    {
        inASequence2StateList(node);
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStateScope() != null)
        {
            node.getStateScope().apply(this);
        }
        outASequence2StateList(node);
    }

    public void inAStateAlpha(AStateAlpha node)
    {
        defaultIn(node);
    }

    public void outAStateAlpha(AStateAlpha node)
    {
        defaultOut(node);
    }

    public void caseAStateAlpha(AStateAlpha node)
    {
        inAStateAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAStateAlpha(node);
    }

    public void inAStateScope(AStateScope node)
    {
        defaultIn(node);
    }

    public void outAStateScope(AStateScope node)
    {
        defaultOut(node);
    }

    public void caseAStateScope(AStateScope node)
    {
        inAStateScope(node);
        if(node.getScopeChar() != null)
        {
            node.getScopeChar().apply(this);
        }
        outAStateScope(node);
    }

    public void inAFsmInputAlpha(AFsmInputAlpha node)
    {
        defaultIn(node);
    }

    public void outAFsmInputAlpha(AFsmInputAlpha node)
    {
        defaultOut(node);
    }

    public void caseAFsmInputAlpha(AFsmInputAlpha node)
    {
        inAFsmInputAlpha(node);
        if(node.getInputAlpha() != null)
        {
            node.getInputAlpha().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getInputAlphaList() != null)
        {
            node.getInputAlphaList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFsmInputAlpha(node);
    }

    public void inASingleInputAlphaList(ASingleInputAlphaList node)
    {
        defaultIn(node);
    }

    public void outASingleInputAlphaList(ASingleInputAlphaList node)
    {
        defaultOut(node);
    }

    public void caseASingleInputAlphaList(ASingleInputAlphaList node)
    {
        inASingleInputAlphaList(node);
        if(node.getMyInputAlpha() != null)
        {
            node.getMyInputAlpha().apply(this);
        }
        outASingleInputAlphaList(node);
    }

    public void inAScopeInputAlphaList(AScopeInputAlphaList node)
    {
        defaultIn(node);
    }

    public void outAScopeInputAlphaList(AScopeInputAlphaList node)
    {
        defaultOut(node);
    }

    public void caseAScopeInputAlphaList(AScopeInputAlphaList node)
    {
        inAScopeInputAlphaList(node);
        if(node.getInputScope() != null)
        {
            node.getInputScope().apply(this);
        }
        outAScopeInputAlphaList(node);
    }

    public void inASequence1InputAlphaList(ASequence1InputAlphaList node)
    {
        defaultIn(node);
    }

    public void outASequence1InputAlphaList(ASequence1InputAlphaList node)
    {
        defaultOut(node);
    }

    public void caseASequence1InputAlphaList(ASequence1InputAlphaList node)
    {
        inASequence1InputAlphaList(node);
        if(node.getInputAlphaList() != null)
        {
            node.getInputAlphaList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getMyInputAlpha() != null)
        {
            node.getMyInputAlpha().apply(this);
        }
        outASequence1InputAlphaList(node);
    }

    public void inASequence2InputAlphaList(ASequence2InputAlphaList node)
    {
        defaultIn(node);
    }

    public void outASequence2InputAlphaList(ASequence2InputAlphaList node)
    {
        defaultOut(node);
    }

    public void caseASequence2InputAlphaList(ASequence2InputAlphaList node)
    {
        inASequence2InputAlphaList(node);
        if(node.getInputAlphaList() != null)
        {
            node.getInputAlphaList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInputScope() != null)
        {
            node.getInputScope().apply(this);
        }
        outASequence2InputAlphaList(node);
    }

    public void inAMyInputAlpha(AMyInputAlpha node)
    {
        defaultIn(node);
    }

    public void outAMyInputAlpha(AMyInputAlpha node)
    {
        defaultOut(node);
    }

    public void caseAMyInputAlpha(AMyInputAlpha node)
    {
        inAMyInputAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyInputAlpha(node);
    }

    public void inAInputScope(AInputScope node)
    {
        defaultIn(node);
    }

    public void outAInputScope(AInputScope node)
    {
        defaultOut(node);
    }

    public void caseAInputScope(AInputScope node)
    {
        inAInputScope(node);
        if(node.getScopeChar() != null)
        {
            node.getScopeChar().apply(this);
        }
        outAInputScope(node);
    }

    public void inAFsmStart(AFsmStart node)
    {
        defaultIn(node);
    }

    public void outAFsmStart(AFsmStart node)
    {
        defaultOut(node);
    }

    public void caseAFsmStart(AFsmStart node)
    {
        inAFsmStart(node);
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getStartAlpha() != null)
        {
            node.getStartAlpha().apply(this);
        }
        outAFsmStart(node);
    }

    public void inAStartAlpha(AStartAlpha node)
    {
        defaultIn(node);
    }

    public void outAStartAlpha(AStartAlpha node)
    {
        defaultOut(node);
    }

    public void caseAStartAlpha(AStartAlpha node)
    {
        inAStartAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAStartAlpha(node);
    }

    public void inAFsmForbidden(AFsmForbidden node)
    {
        defaultIn(node);
    }

    public void outAFsmForbidden(AFsmForbidden node)
    {
        defaultOut(node);
    }

    public void caseAFsmForbidden(AFsmForbidden node)
    {
        inAFsmForbidden(node);
        if(node.getForbidden() != null)
        {
            node.getForbidden().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getForbiddenStateList() != null)
        {
            node.getForbiddenStateList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFsmForbidden(node);
    }

    public void inAForbiddenStateList(AForbiddenStateList node)
    {
        defaultIn(node);
    }

    public void outAForbiddenStateList(AForbiddenStateList node)
    {
        defaultOut(node);
    }

    public void caseAForbiddenStateList(AForbiddenStateList node)
    {
        inAForbiddenStateList(node);
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        outAForbiddenStateList(node);
    }

    public void inAEmptyForbiddenStateList(AEmptyForbiddenStateList node)
    {
        defaultIn(node);
    }

    public void outAEmptyForbiddenStateList(AEmptyForbiddenStateList node)
    {
        defaultOut(node);
    }

    public void caseAEmptyForbiddenStateList(AEmptyForbiddenStateList node)
    {
        inAEmptyForbiddenStateList(node);
        outAEmptyForbiddenStateList(node);
    }

    public void inAFsmTransition(AFsmTransition node)
    {
        defaultIn(node);
    }

    public void outAFsmTransition(AFsmTransition node)
    {
        defaultOut(node);
    }

    public void caseAFsmTransition(AFsmTransition node)
    {
        inAFsmTransition(node);
        if(node.getTransitionFunc() != null)
        {
            node.getTransitionFunc().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getTransitionList() != null)
        {
            node.getTransitionList().apply(this);
        }
        outAFsmTransition(node);
    }

    public void inASingleTransitionList(ASingleTransitionList node)
    {
        defaultIn(node);
    }

    public void outASingleTransitionList(ASingleTransitionList node)
    {
        defaultOut(node);
    }

    public void caseASingleTransitionList(ASingleTransitionList node)
    {
        inASingleTransitionList(node);
        if(node.getOneTransition() != null)
        {
            node.getOneTransition().apply(this);
        }
        outASingleTransitionList(node);
    }

    public void inASequenceTransitionList(ASequenceTransitionList node)
    {
        defaultIn(node);
    }

    public void outASequenceTransitionList(ASequenceTransitionList node)
    {
        defaultOut(node);
    }

    public void caseASequenceTransitionList(ASequenceTransitionList node)
    {
        inASequenceTransitionList(node);
        if(node.getTransitionList() != null)
        {
            node.getTransitionList().apply(this);
        }
        if(node.getOneTransition() != null)
        {
            node.getOneTransition().apply(this);
        }
        outASequenceTransitionList(node);
    }

    public void inAFsmOneTransition(AFsmOneTransition node)
    {
        defaultIn(node);
    }

    public void outAFsmOneTransition(AFsmOneTransition node)
    {
        defaultOut(node);
    }

    public void caseAFsmOneTransition(AFsmOneTransition node)
    {
        inAFsmOneTransition(node);
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        if(node.getState1() != null)
        {
            node.getState1().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getAlpha() != null)
        {
            node.getAlpha().apply(this);
        }
        if(node.getR1() != null)
        {
            node.getR1().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getState2() != null)
        {
            node.getState2().apply(this);
        }
        outAFsmOneTransition(node);
    }

    public void inAMyStateAlpha1(AMyStateAlpha1 node)
    {
        defaultIn(node);
    }

    public void outAMyStateAlpha1(AMyStateAlpha1 node)
    {
        defaultOut(node);
    }

    public void caseAMyStateAlpha1(AMyStateAlpha1 node)
    {
        inAMyStateAlpha1(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyStateAlpha1(node);
    }

    public void inAMyTransitionInputAlpha(AMyTransitionInputAlpha node)
    {
        defaultIn(node);
    }

    public void outAMyTransitionInputAlpha(AMyTransitionInputAlpha node)
    {
        defaultOut(node);
    }

    public void caseAMyTransitionInputAlpha(AMyTransitionInputAlpha node)
    {
        inAMyTransitionInputAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyTransitionInputAlpha(node);
    }

    public void inAMyStateAlpha2(AMyStateAlpha2 node)
    {
        defaultIn(node);
    }

    public void outAMyStateAlpha2(AMyStateAlpha2 node)
    {
        defaultOut(node);
    }

    public void caseAMyStateAlpha2(AMyStateAlpha2 node)
    {
        inAMyStateAlpha2(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyStateAlpha2(node);
    }

    public void inAFsmTrigger(AFsmTrigger node)
    {
        defaultIn(node);
    }

    public void outAFsmTrigger(AFsmTrigger node)
    {
        defaultOut(node);
    }

    public void caseAFsmTrigger(AFsmTrigger node)
    {
        inAFsmTrigger(node);
        if(node.getTrigger() != null)
        {
            node.getTrigger().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getTriggerList() != null)
        {
            node.getTriggerList().apply(this);
        }
        outAFsmTrigger(node);
    }

    public void inASingleTriggerList(ASingleTriggerList node)
    {
        defaultIn(node);
    }

    public void outASingleTriggerList(ASingleTriggerList node)
    {
        defaultOut(node);
    }

    public void caseASingleTriggerList(ASingleTriggerList node)
    {
        inASingleTriggerList(node);
        if(node.getMyTrigger() != null)
        {
            node.getMyTrigger().apply(this);
        }
        outASingleTriggerList(node);
    }

    public void inASequenceTriggerList(ASequenceTriggerList node)
    {
        defaultIn(node);
    }

    public void outASequenceTriggerList(ASequenceTriggerList node)
    {
        defaultOut(node);
    }

    public void caseASequenceTriggerList(ASequenceTriggerList node)
    {
        inASequenceTriggerList(node);
        if(node.getTriggerList() != null)
        {
            node.getTriggerList().apply(this);
        }
        if(node.getMyTrigger() != null)
        {
            node.getMyTrigger().apply(this);
        }
        outASequenceTriggerList(node);
    }

    public void inAStatetriggerMyTrigger(AStatetriggerMyTrigger node)
    {
        defaultIn(node);
    }

    public void outAStatetriggerMyTrigger(AStatetriggerMyTrigger node)
    {
        defaultOut(node);
    }

    public void caseAStatetriggerMyTrigger(AStatetriggerMyTrigger node)
    {
        inAStatetriggerMyTrigger(node);
        if(node.getState() != null)
        {
            node.getState().apply(this);
        }
        if(node.getHyphen() != null)
        {
            node.getHyphen().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        if(node.getMultiTriggers() != null)
        {
            node.getMultiTriggers().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        outAStatetriggerMyTrigger(node);
    }

    public void inAMyTriggerStateAlpha(AMyTriggerStateAlpha node)
    {
        defaultIn(node);
    }

    public void outAMyTriggerStateAlpha(AMyTriggerStateAlpha node)
    {
        defaultOut(node);
    }

    public void caseAMyTriggerStateAlpha(AMyTriggerStateAlpha node)
    {
        inAMyTriggerStateAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyTriggerStateAlpha(node);
    }

    public void inASingleTriggers(ASingleTriggers node)
    {
        defaultIn(node);
    }

    public void outASingleTriggers(ASingleTriggers node)
    {
        defaultOut(node);
    }

    public void caseASingleTriggers(ASingleTriggers node)
    {
        inASingleTriggers(node);
        if(node.getAtrigger() != null)
        {
            node.getAtrigger().apply(this);
        }
        outASingleTriggers(node);
    }

    public void inASequenceTriggers(ASequenceTriggers node)
    {
        defaultIn(node);
    }

    public void outASequenceTriggers(ASequenceTriggers node)
    {
        defaultOut(node);
    }

    public void caseASequenceTriggers(ASequenceTriggers node)
    {
        inASequenceTriggers(node);
        if(node.getTriggers() != null)
        {
            node.getTriggers().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAtrigger() != null)
        {
            node.getAtrigger().apply(this);
        }
        outASequenceTriggers(node);
    }

    public void inAAtrigger(AAtrigger node)
    {
        defaultIn(node);
    }

    public void outAAtrigger(AAtrigger node)
    {
        defaultOut(node);
    }

    public void caseAAtrigger(AAtrigger node)
    {
        inAAtrigger(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAAtrigger(node);
    }

    public void inAFsmPriority(AFsmPriority node)
    {
        defaultIn(node);
    }

    public void outAFsmPriority(AFsmPriority node)
    {
        defaultOut(node);
    }

    public void caseAFsmPriority(AFsmPriority node)
    {
        inAFsmPriority(node);
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getPriorityList() != null)
        {
            node.getPriorityList().apply(this);
        }
        outAFsmPriority(node);
    }

    public void inAEmptyFsmPriority(AEmptyFsmPriority node)
    {
        defaultIn(node);
    }

    public void outAEmptyFsmPriority(AEmptyFsmPriority node)
    {
        defaultOut(node);
    }

    public void caseAEmptyFsmPriority(AEmptyFsmPriority node)
    {
        inAEmptyFsmPriority(node);
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEmptyFsmPriority(node);
    }

    public void inASinglePriorityList(ASinglePriorityList node)
    {
        defaultIn(node);
    }

    public void outASinglePriorityList(ASinglePriorityList node)
    {
        defaultOut(node);
    }

    public void caseASinglePriorityList(ASinglePriorityList node)
    {
        inASinglePriorityList(node);
        if(node.getMyPriority() != null)
        {
            node.getMyPriority().apply(this);
        }
        outASinglePriorityList(node);
    }

    public void inASequencePriorityList(ASequencePriorityList node)
    {
        defaultIn(node);
    }

    public void outASequencePriorityList(ASequencePriorityList node)
    {
        defaultOut(node);
    }

    public void caseASequencePriorityList(ASequencePriorityList node)
    {
        inASequencePriorityList(node);
        if(node.getPriorityList() != null)
        {
            node.getPriorityList().apply(this);
        }
        if(node.getMyPriority() != null)
        {
            node.getMyPriority().apply(this);
        }
        outASequencePriorityList(node);
    }

    public void inATriggerpriorityMyPriority(ATriggerpriorityMyPriority node)
    {
        defaultIn(node);
    }

    public void outATriggerpriorityMyPriority(ATriggerpriorityMyPriority node)
    {
        defaultOut(node);
    }

    public void caseATriggerpriorityMyPriority(ATriggerpriorityMyPriority node)
    {
        inATriggerpriorityMyPriority(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTrigger() != null)
        {
            node.getTrigger().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPrioritySetting() != null)
        {
            node.getPrioritySetting().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATriggerpriorityMyPriority(node);
    }

    public void inAMyTriggerAlpha(AMyTriggerAlpha node)
    {
        defaultIn(node);
    }

    public void outAMyTriggerAlpha(AMyTriggerAlpha node)
    {
        defaultOut(node);
    }

    public void caseAMyTriggerAlpha(AMyTriggerAlpha node)
    {
        inAMyTriggerAlpha(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyTriggerAlpha(node);
    }

    public void inAIntegerPrioritySetting(AIntegerPrioritySetting node)
    {
        defaultIn(node);
    }

    public void outAIntegerPrioritySetting(AIntegerPrioritySetting node)
    {
        defaultOut(node);
    }

    public void caseAIntegerPrioritySetting(AIntegerPrioritySetting node)
    {
        inAIntegerPrioritySetting(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerPrioritySetting(node);
    }

    public void inAFsmContextTypes(AFsmContextTypes node)
    {
        defaultIn(node);
    }

    public void outAFsmContextTypes(AFsmContextTypes node)
    {
        defaultOut(node);
    }

    public void caseAFsmContextTypes(AFsmContextTypes node)
    {
        inAFsmContextTypes(node);
        if(node.getContextTypes() != null)
        {
            node.getContextTypes().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        outAFsmContextTypes(node);
    }

    public void inASingleTypeList(ASingleTypeList node)
    {
        defaultIn(node);
    }

    public void outASingleTypeList(ASingleTypeList node)
    {
        defaultOut(node);
    }

    public void caseASingleTypeList(ASingleTypeList node)
    {
        inASingleTypeList(node);
        if(node.getMyType() != null)
        {
            node.getMyType().apply(this);
        }
        outASingleTypeList(node);
    }

    public void inASequenceTypeList(ASequenceTypeList node)
    {
        defaultIn(node);
    }

    public void outASequenceTypeList(ASequenceTypeList node)
    {
        defaultOut(node);
    }

    public void caseASequenceTypeList(ASequenceTypeList node)
    {
        inASequenceTypeList(node);
        if(node.getTypeList() != null)
        {
            node.getTypeList().apply(this);
        }
        if(node.getMyType() != null)
        {
            node.getMyType().apply(this);
        }
        outASequenceTypeList(node);
    }

    public void inAMyType(AMyType node)
    {
        defaultIn(node);
    }

    public void outAMyType(AMyType node)
    {
        defaultOut(node);
    }

    public void caseAMyType(AMyType node)
    {
        inAMyType(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getShorttypename() != null)
        {
            node.getShorttypename().apply(this);
        }
        if(node.getComma1() != null)
        {
            node.getComma1().apply(this);
        }
        if(node.getFulltypename() != null)
        {
            node.getFulltypename().apply(this);
        }
        if(node.getComma2() != null)
        {
            node.getComma2().apply(this);
        }
        if(node.getRefreshRate() != null)
        {
            node.getRefreshRate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMyType(node);
    }

    public void inATypeAbbr(ATypeAbbr node)
    {
        defaultIn(node);
    }

    public void outATypeAbbr(ATypeAbbr node)
    {
        defaultOut(node);
    }

    public void caseATypeAbbr(ATypeAbbr node)
    {
        inATypeAbbr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATypeAbbr(node);
    }

    public void inATypeName(ATypeName node)
    {
        defaultIn(node);
    }

    public void outATypeName(ATypeName node)
    {
        defaultOut(node);
    }

    public void caseATypeName(ATypeName node)
    {
        inATypeName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATypeName(node);
    }

    public void inAIntegerRefreshRate(AIntegerRefreshRate node)
    {
        defaultIn(node);
    }

    public void outAIntegerRefreshRate(AIntegerRefreshRate node)
    {
        defaultOut(node);
    }

    public void caseAIntegerRefreshRate(AIntegerRefreshRate node)
    {
        inAIntegerRefreshRate(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerRefreshRate(node);
    }

    public void inAFsmContextVariables(AFsmContextVariables node)
    {
        defaultIn(node);
    }

    public void outAFsmContextVariables(AFsmContextVariables node)
    {
        defaultOut(node);
    }

    public void caseAFsmContextVariables(AFsmContextVariables node)
    {
        inAFsmContextVariables(node);
        if(node.getContextVariables() != null)
        {
            node.getContextVariables().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getVariableList() != null)
        {
            node.getVariableList().apply(this);
        }
        outAFsmContextVariables(node);
    }

    public void inASingleVariableList(ASingleVariableList node)
    {
        defaultIn(node);
    }

    public void outASingleVariableList(ASingleVariableList node)
    {
        defaultOut(node);
    }

    public void caseASingleVariableList(ASingleVariableList node)
    {
        inASingleVariableList(node);
        if(node.getMyVariable() != null)
        {
            node.getMyVariable().apply(this);
        }
        outASingleVariableList(node);
    }

    public void inASequenceVariableList(ASequenceVariableList node)
    {
        defaultIn(node);
    }

    public void outASequenceVariableList(ASequenceVariableList node)
    {
        defaultOut(node);
    }

    public void caseASequenceVariableList(ASequenceVariableList node)
    {
        inASequenceVariableList(node);
        if(node.getVariableList() != null)
        {
            node.getVariableList().apply(this);
        }
        if(node.getMyVariable() != null)
        {
            node.getMyVariable().apply(this);
        }
        outASequenceVariableList(node);
    }

    public void inAMyVariable(AMyVariable node)
    {
        defaultIn(node);
    }

    public void outAMyVariable(AMyVariable node)
    {
        defaultOut(node);
    }

    public void caseAMyVariable(AMyVariable node)
    {
        inAMyVariable(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getVarName() != null)
        {
            node.getVarName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getShorttypename() != null)
        {
            node.getShorttypename().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMyVariable(node);
    }

    public void inAVariableName(AVariableName node)
    {
        defaultIn(node);
    }

    public void outAVariableName(AVariableName node)
    {
        defaultOut(node);
    }

    public void caseAVariableName(AVariableName node)
    {
        inAVariableName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAVariableName(node);
    }

    public void inAVarTypeName(AVarTypeName node)
    {
        defaultIn(node);
    }

    public void outAVarTypeName(AVarTypeName node)
    {
        defaultOut(node);
    }

    public void caseAVarTypeName(AVarTypeName node)
    {
        inAVarTypeName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAVarTypeName(node);
    }

    public void inAFsmPredicateAbbr(AFsmPredicateAbbr node)
    {
        defaultIn(node);
    }

    public void outAFsmPredicateAbbr(AFsmPredicateAbbr node)
    {
        defaultOut(node);
    }

    public void caseAFsmPredicateAbbr(AFsmPredicateAbbr node)
    {
        inAFsmPredicateAbbr(node);
        if(node.getPredicateAbbr() != null)
        {
            node.getPredicateAbbr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getPredicateList() != null)
        {
            node.getPredicateList().apply(this);
        }
        outAFsmPredicateAbbr(node);
    }

    public void inASinglePredicateList(ASinglePredicateList node)
    {
        defaultIn(node);
    }

    public void outASinglePredicateList(ASinglePredicateList node)
    {
        defaultOut(node);
    }

    public void caseASinglePredicateList(ASinglePredicateList node)
    {
        inASinglePredicateList(node);
        if(node.getMyPredicate() != null)
        {
            node.getMyPredicate().apply(this);
        }
        outASinglePredicateList(node);
    }

    public void inASequencePredicateList(ASequencePredicateList node)
    {
        defaultIn(node);
    }

    public void outASequencePredicateList(ASequencePredicateList node)
    {
        defaultOut(node);
    }

    public void caseASequencePredicateList(ASequencePredicateList node)
    {
        inASequencePredicateList(node);
        if(node.getPredicateList() != null)
        {
            node.getPredicateList().apply(this);
        }
        if(node.getMyPredicate() != null)
        {
            node.getMyPredicate().apply(this);
        }
        outASequencePredicateList(node);
    }

    public void inAMyPredicate(AMyPredicate node)
    {
        defaultIn(node);
    }

    public void outAMyPredicate(AMyPredicate node)
    {
        defaultOut(node);
    }

    public void caseAMyPredicate(AMyPredicate node)
    {
        inAMyPredicate(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPredicateName() != null)
        {
            node.getPredicateName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPredicateLogic() != null)
        {
            node.getPredicateLogic().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMyPredicate(node);
    }

    public void inAPredNamePredicateName(APredNamePredicateName node)
    {
        defaultIn(node);
    }

    public void outAPredNamePredicateName(APredNamePredicateName node)
    {
        defaultOut(node);
    }

    public void caseAPredNamePredicateName(APredNamePredicateName node)
    {
        inAPredNamePredicateName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPredNamePredicateName(node);
    }

    public void inAPredicateLogic(APredicateLogic node)
    {
        defaultIn(node);
    }

    public void outAPredicateLogic(APredicateLogic node)
    {
        defaultOut(node);
    }

    public void caseAPredicateLogic(APredicateLogic node)
    {
        inAPredicateLogic(node);
        if(node.getLogicOrExp() != null)
        {
            node.getLogicOrExp().apply(this);
        }
        outAPredicateLogic(node);
    }

    public void inALogicOrExp(ALogicOrExp node)
    {
        defaultIn(node);
    }

    public void outALogicOrExp(ALogicOrExp node)
    {
        defaultOut(node);
    }

    public void caseALogicOrExp(ALogicOrExp node)
    {
        inALogicOrExp(node);
        if(node.getAnd1() != null)
        {
            node.getAnd1().apply(this);
        }
        if(node.getLOr() != null)
        {
            node.getLOr().apply(this);
        }
        if(node.getAnd2() != null)
        {
            node.getAnd2().apply(this);
        }
        outALogicOrExp(node);
    }

    public void inAEmptyLogicOrExp(AEmptyLogicOrExp node)
    {
        defaultIn(node);
    }

    public void outAEmptyLogicOrExp(AEmptyLogicOrExp node)
    {
        defaultOut(node);
    }

    public void caseAEmptyLogicOrExp(AEmptyLogicOrExp node)
    {
        inAEmptyLogicOrExp(node);
        if(node.getLogicAndExp() != null)
        {
            node.getLogicAndExp().apply(this);
        }
        outAEmptyLogicOrExp(node);
    }

    public void inALogicAndExp(ALogicAndExp node)
    {
        defaultIn(node);
    }

    public void outALogicAndExp(ALogicAndExp node)
    {
        defaultOut(node);
    }

    public void caseALogicAndExp(ALogicAndExp node)
    {
        inALogicAndExp(node);
        if(node.getUnary1() != null)
        {
            node.getUnary1().apply(this);
        }
        if(node.getLAnd() != null)
        {
            node.getLAnd().apply(this);
        }
        if(node.getUnary2() != null)
        {
            node.getUnary2().apply(this);
        }
        outALogicAndExp(node);
    }

    public void inAEmptyLogicAndExp(AEmptyLogicAndExp node)
    {
        defaultIn(node);
    }

    public void outAEmptyLogicAndExp(AEmptyLogicAndExp node)
    {
        defaultOut(node);
    }

    public void caseAEmptyLogicAndExp(AEmptyLogicAndExp node)
    {
        inAEmptyLogicAndExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outAEmptyLogicAndExp(node);
    }

    public void inANotunaryUnaryExp(ANotunaryUnaryExp node)
    {
        defaultIn(node);
    }

    public void outANotunaryUnaryExp(ANotunaryUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseANotunaryUnaryExp(ANotunaryUnaryExp node)
    {
        inANotunaryUnaryExp(node);
        if(node.getLNot() != null)
        {
            node.getLNot().apply(this);
        }
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outANotunaryUnaryExp(node);
    }

    public void inAPrimexpUnaryExp(APrimexpUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAPrimexpUnaryExp(APrimexpUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseAPrimexpUnaryExp(APrimexpUnaryExp node)
    {
        inAPrimexpUnaryExp(node);
        if(node.getPrimaryExp() != null)
        {
            node.getPrimaryExp().apply(this);
        }
        outAPrimexpUnaryExp(node);
    }

    public void inAExpPrimaryExp(AExpPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outAExpPrimaryExp(AExpPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseAExpPrimaryExp(AExpPrimaryExp node)
    {
        inAExpPrimaryExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpPrimaryExp(node);
    }

    public void inAParenexpPrimaryExp(AParenexpPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outAParenexpPrimaryExp(AParenexpPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseAParenexpPrimaryExp(AParenexpPrimaryExp node)
    {
        inAParenexpPrimaryExp(node);
        if(node.getParenExp() != null)
        {
            node.getParenExp().apply(this);
        }
        outAParenexpPrimaryExp(node);
    }

    public void inAParenExp(AParenExp node)
    {
        defaultIn(node);
    }

    public void outAParenExp(AParenExp node)
    {
        defaultOut(node);
    }

    public void caseAParenExp(AParenExp node)
    {
        inAParenExp(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPredicateLogic() != null)
        {
            node.getPredicateLogic().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenExp(node);
    }

    public void inAFsmConstraintPair(AFsmConstraintPair node)
    {
        defaultIn(node);
    }

    public void outAFsmConstraintPair(AFsmConstraintPair node)
    {
        defaultOut(node);
    }

    public void caseAFsmConstraintPair(AFsmConstraintPair node)
    {
        inAFsmConstraintPair(node);
        if(node.getConstraintPair() != null)
        {
            node.getConstraintPair().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getConstraintPairList() != null)
        {
            node.getConstraintPairList().apply(this);
        }
        outAFsmConstraintPair(node);
    }

    public void inASingleConstraintPairList(ASingleConstraintPairList node)
    {
        defaultIn(node);
    }

    public void outASingleConstraintPairList(ASingleConstraintPairList node)
    {
        defaultOut(node);
    }

    public void caseASingleConstraintPairList(ASingleConstraintPairList node)
    {
        inASingleConstraintPairList(node);
        if(node.getMyConstraintPair() != null)
        {
            node.getMyConstraintPair().apply(this);
        }
        outASingleConstraintPairList(node);
    }

    public void inASequenceConstraintPairList(ASequenceConstraintPairList node)
    {
        defaultIn(node);
    }

    public void outASequenceConstraintPairList(ASequenceConstraintPairList node)
    {
        defaultOut(node);
    }

    public void caseASequenceConstraintPairList(ASequenceConstraintPairList node)
    {
        inASequenceConstraintPairList(node);
        if(node.getConstraintPairList() != null)
        {
            node.getConstraintPairList().apply(this);
        }
        if(node.getMyConstraintPair() != null)
        {
            node.getMyConstraintPair().apply(this);
        }
        outASequenceConstraintPairList(node);
    }

    public void inAMyConstraintPair(AMyConstraintPair node)
    {
        defaultIn(node);
    }

    public void outAMyConstraintPair(AMyConstraintPair node)
    {
        defaultOut(node);
    }

    public void caseAMyConstraintPair(AMyConstraintPair node)
    {
        inAMyConstraintPair(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getConditionPredicate() != null)
        {
            node.getConditionPredicate().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEffectPredicate() != null)
        {
            node.getEffectPredicate().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMyConstraintPair(node);
    }

    public void inAConditionPredicate(AConditionPredicate node)
    {
        defaultIn(node);
    }

    public void outAConditionPredicate(AConditionPredicate node)
    {
        defaultOut(node);
    }

    public void caseAConditionPredicate(AConditionPredicate node)
    {
        inAConditionPredicate(node);
        if(node.getPredicateLogic() != null)
        {
            node.getPredicateLogic().apply(this);
        }
        outAConditionPredicate(node);
    }

    public void inAEffectPredicate(AEffectPredicate node)
    {
        defaultIn(node);
    }

    public void outAEffectPredicate(AEffectPredicate node)
    {
        defaultOut(node);
    }

    public void caseAEffectPredicate(AEffectPredicate node)
    {
        inAEffectPredicate(node);
        if(node.getPredicateLogic() != null)
        {
            node.getPredicateLogic().apply(this);
        }
        outAEffectPredicate(node);
    }

    public void inAFsmVariableAbbr(AFsmVariableAbbr node)
    {
        defaultIn(node);
    }

    public void outAFsmVariableAbbr(AFsmVariableAbbr node)
    {
        defaultOut(node);
    }

    public void caseAFsmVariableAbbr(AFsmVariableAbbr node)
    {
        inAFsmVariableAbbr(node);
        if(node.getVariableAbbr() != null)
        {
            node.getVariableAbbr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getAbbrVariableList() != null)
        {
            node.getAbbrVariableList().apply(this);
        }
        outAFsmVariableAbbr(node);
    }

    public void inASingleAbbrVariableList(ASingleAbbrVariableList node)
    {
        defaultIn(node);
    }

    public void outASingleAbbrVariableList(ASingleAbbrVariableList node)
    {
        defaultOut(node);
    }

    public void caseASingleAbbrVariableList(ASingleAbbrVariableList node)
    {
        inASingleAbbrVariableList(node);
        if(node.getOneVariablePair() != null)
        {
            node.getOneVariablePair().apply(this);
        }
        outASingleAbbrVariableList(node);
    }

    public void inASequenceAbbrVariableList(ASequenceAbbrVariableList node)
    {
        defaultIn(node);
    }

    public void outASequenceAbbrVariableList(ASequenceAbbrVariableList node)
    {
        defaultOut(node);
    }

    public void caseASequenceAbbrVariableList(ASequenceAbbrVariableList node)
    {
        inASequenceAbbrVariableList(node);
        if(node.getAbbrVariableList() != null)
        {
            node.getAbbrVariableList().apply(this);
        }
        if(node.getOneVariablePair() != null)
        {
            node.getOneVariablePair().apply(this);
        }
        outASequenceAbbrVariableList(node);
    }

    public void inAOneVariablePair(AOneVariablePair node)
    {
        defaultIn(node);
    }

    public void outAOneVariablePair(AOneVariablePair node)
    {
        defaultOut(node);
    }

    public void caseAOneVariablePair(AOneVariablePair node)
    {
        inAOneVariablePair(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAbbrVariableName() != null)
        {
            node.getAbbrVariableName().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getBinaryLogicExp() != null)
        {
            node.getBinaryLogicExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAOneVariablePair(node);
    }

    public void inAAbbrVariableName(AAbbrVariableName node)
    {
        defaultIn(node);
    }

    public void outAAbbrVariableName(AAbbrVariableName node)
    {
        defaultOut(node);
    }

    public void caseAAbbrVariableName(AAbbrVariableName node)
    {
        inAAbbrVariableName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAAbbrVariableName(node);
    }

    public void inABtBinaryLogicExp(ABtBinaryLogicExp node)
    {
        defaultIn(node);
    }

    public void outABtBinaryLogicExp(ABtBinaryLogicExp node)
    {
        defaultOut(node);
    }

    public void caseABtBinaryLogicExp(ABtBinaryLogicExp node)
    {
        inABtBinaryLogicExp(node);
        if(node.getBtClients() != null)
        {
            node.getBtClients().apply(this);
        }
        if(node.getLIn() != null)
        {
            node.getLIn().apply(this);
        }
        if(node.getBtSetName() != null)
        {
            node.getBtSetName().apply(this);
        }
        outABtBinaryLogicExp(node);
    }

    public void inADistanceBinaryLogicExp(ADistanceBinaryLogicExp node)
    {
        defaultIn(node);
    }

    public void outADistanceBinaryLogicExp(ADistanceBinaryLogicExp node)
    {
        defaultOut(node);
    }

    public void caseADistanceBinaryLogicExp(ADistanceBinaryLogicExp node)
    {
        inADistanceBinaryLogicExp(node);
        if(node.getDistanceFunc() != null)
        {
            node.getDistanceFunc().apply(this);
        }
        if(node.getEqualityLogic() != null)
        {
            node.getEqualityLogic().apply(this);
        }
        if(node.getDistanceValue() != null)
        {
            node.getDistanceValue().apply(this);
        }
        outADistanceBinaryLogicExp(node);
    }

    public void inACommonBinaryLogicExp(ACommonBinaryLogicExp node)
    {
        defaultIn(node);
    }

    public void outACommonBinaryLogicExp(ACommonBinaryLogicExp node)
    {
        defaultOut(node);
    }

    public void caseACommonBinaryLogicExp(ACommonBinaryLogicExp node)
    {
        inACommonBinaryLogicExp(node);
        if(node.getEqualityExp() != null)
        {
            node.getEqualityExp().apply(this);
        }
        outACommonBinaryLogicExp(node);
    }

    public void inALogicEqEqualityExp(ALogicEqEqualityExp node)
    {
        defaultIn(node);
    }

    public void outALogicEqEqualityExp(ALogicEqEqualityExp node)
    {
        defaultOut(node);
    }

    public void caseALogicEqEqualityExp(ALogicEqEqualityExp node)
    {
        inALogicEqEqualityExp(node);
        if(node.getEq1() != null)
        {
            node.getEq1().apply(this);
        }
        if(node.getLEq() != null)
        {
            node.getLEq().apply(this);
        }
        if(node.getEq2() != null)
        {
            node.getEq2().apply(this);
        }
        outALogicEqEqualityExp(node);
    }

    public void inALogicNeqEqualityExp(ALogicNeqEqualityExp node)
    {
        defaultIn(node);
    }

    public void outALogicNeqEqualityExp(ALogicNeqEqualityExp node)
    {
        defaultOut(node);
    }

    public void caseALogicNeqEqualityExp(ALogicNeqEqualityExp node)
    {
        inALogicNeqEqualityExp(node);
        if(node.getNeq1() != null)
        {
            node.getNeq1().apply(this);
        }
        if(node.getLNeq() != null)
        {
            node.getLNeq().apply(this);
        }
        if(node.getNeq2() != null)
        {
            node.getNeq2().apply(this);
        }
        outALogicNeqEqualityExp(node);
    }

    public void inAEmptyEqualityExp(AEmptyEqualityExp node)
    {
        defaultIn(node);
    }

    public void outAEmptyEqualityExp(AEmptyEqualityExp node)
    {
        defaultOut(node);
    }

    public void caseAEmptyEqualityExp(AEmptyEqualityExp node)
    {
        inAEmptyEqualityExp(node);
        if(node.getRelationExp() != null)
        {
            node.getRelationExp().apply(this);
        }
        outAEmptyEqualityExp(node);
    }

    public void inALogicGtRelationExp(ALogicGtRelationExp node)
    {
        defaultIn(node);
    }

    public void outALogicGtRelationExp(ALogicGtRelationExp node)
    {
        defaultOut(node);
    }

    public void caseALogicGtRelationExp(ALogicGtRelationExp node)
    {
        inALogicGtRelationExp(node);
        if(node.getGt1() != null)
        {
            node.getGt1().apply(this);
        }
        if(node.getLGt() != null)
        {
            node.getLGt().apply(this);
        }
        if(node.getGt2() != null)
        {
            node.getGt2().apply(this);
        }
        outALogicGtRelationExp(node);
    }

    public void inALogicLtRelationExp(ALogicLtRelationExp node)
    {
        defaultIn(node);
    }

    public void outALogicLtRelationExp(ALogicLtRelationExp node)
    {
        defaultOut(node);
    }

    public void caseALogicLtRelationExp(ALogicLtRelationExp node)
    {
        inALogicLtRelationExp(node);
        if(node.getLt1() != null)
        {
            node.getLt1().apply(this);
        }
        if(node.getLLt() != null)
        {
            node.getLLt().apply(this);
        }
        if(node.getLt2() != null)
        {
            node.getLt2().apply(this);
        }
        outALogicLtRelationExp(node);
    }

    public void inALogicLeRelationExp(ALogicLeRelationExp node)
    {
        defaultIn(node);
    }

    public void outALogicLeRelationExp(ALogicLeRelationExp node)
    {
        defaultOut(node);
    }

    public void caseALogicLeRelationExp(ALogicLeRelationExp node)
    {
        inALogicLeRelationExp(node);
        if(node.getLe1() != null)
        {
            node.getLe1().apply(this);
        }
        if(node.getLLe() != null)
        {
            node.getLLe().apply(this);
        }
        if(node.getLe2() != null)
        {
            node.getLe2().apply(this);
        }
        outALogicLeRelationExp(node);
    }

    public void inALogicGeRelationExp(ALogicGeRelationExp node)
    {
        defaultIn(node);
    }

    public void outALogicGeRelationExp(ALogicGeRelationExp node)
    {
        defaultOut(node);
    }

    public void caseALogicGeRelationExp(ALogicGeRelationExp node)
    {
        inALogicGeRelationExp(node);
        if(node.getGe1() != null)
        {
            node.getGe1().apply(this);
        }
        if(node.getLGe() != null)
        {
            node.getLGe().apply(this);
        }
        if(node.getGe2() != null)
        {
            node.getGe2().apply(this);
        }
        outALogicGeRelationExp(node);
    }

    public void inAEmptyRelationExp(AEmptyRelationExp node)
    {
        defaultIn(node);
    }

    public void outAEmptyRelationExp(AEmptyRelationExp node)
    {
        defaultOut(node);
    }

    public void caseAEmptyRelationExp(AEmptyRelationExp node)
    {
        inAEmptyRelationExp(node);
        if(node.getMyUnaryExp() != null)
        {
            node.getMyUnaryExp().apply(this);
        }
        outAEmptyRelationExp(node);
    }

    public void inAMyUnaryExp(AMyUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAMyUnaryExp(AMyUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseAMyUnaryExp(AMyUnaryExp node)
    {
        inAMyUnaryExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMyUnaryExp(node);
    }

    public void inABtClients(ABtClients node)
    {
        defaultIn(node);
    }

    public void outABtClients(ABtClients node)
    {
        defaultOut(node);
    }

    public void caseABtClients(ABtClients node)
    {
        inABtClients(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getBtValueList() != null)
        {
            node.getBtValueList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABtClients(node);
    }

    public void inABtExpBtValueList(ABtExpBtValueList node)
    {
        defaultIn(node);
    }

    public void outABtExpBtValueList(ABtExpBtValueList node)
    {
        defaultOut(node);
    }

    public void caseABtExpBtValueList(ABtExpBtValueList node)
    {
        inABtExpBtValueList(node);
        if(node.getPredicateLogic() != null)
        {
            node.getPredicateLogic().apply(this);
        }
        outABtExpBtValueList(node);
    }

    public void inABtSetName(ABtSetName node)
    {
        defaultIn(node);
    }

    public void outABtSetName(ABtSetName node)
    {
        defaultOut(node);
    }

    public void caseABtSetName(ABtSetName node)
    {
        inABtSetName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outABtSetName(node);
    }

    public void inADistanceFunc(ADistanceFunc node)
    {
        defaultIn(node);
    }

    public void outADistanceFunc(ADistanceFunc node)
    {
        defaultOut(node);
    }

    public void caseADistanceFunc(ADistanceFunc node)
    {
        inADistanceFunc(node);
        if(node.getDist() != null)
        {
            node.getDist().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLocationName() != null)
        {
            node.getLocationName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADistanceFunc(node);
    }

    public void inADistanceValue(ADistanceValue node)
    {
        defaultIn(node);
    }

    public void outADistanceValue(ADistanceValue node)
    {
        defaultOut(node);
    }

    public void caseADistanceValue(ADistanceValue node)
    {
        inADistanceValue(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADistanceValue(node);
    }

    public void inALocationName(ALocationName node)
    {
        defaultIn(node);
    }

    public void outALocationName(ALocationName node)
    {
        defaultOut(node);
    }

    public void caseALocationName(ALocationName node)
    {
        inALocationName(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outALocationName(node);
    }

    public void inAGtEqualityLogic(AGtEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outAGtEqualityLogic(AGtEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseAGtEqualityLogic(AGtEqualityLogic node)
    {
        inAGtEqualityLogic(node);
        if(node.getLGt() != null)
        {
            node.getLGt().apply(this);
        }
        outAGtEqualityLogic(node);
    }

    public void inALtEqualityLogic(ALtEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outALtEqualityLogic(ALtEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseALtEqualityLogic(ALtEqualityLogic node)
    {
        inALtEqualityLogic(node);
        if(node.getLLt() != null)
        {
            node.getLLt().apply(this);
        }
        outALtEqualityLogic(node);
    }

    public void inAEqEqualityLogic(AEqEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outAEqEqualityLogic(AEqEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseAEqEqualityLogic(AEqEqualityLogic node)
    {
        inAEqEqualityLogic(node);
        if(node.getLEq() != null)
        {
            node.getLEq().apply(this);
        }
        outAEqEqualityLogic(node);
    }

    public void inALeEqualityLogic(ALeEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outALeEqualityLogic(ALeEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseALeEqualityLogic(ALeEqualityLogic node)
    {
        inALeEqualityLogic(node);
        if(node.getLLe() != null)
        {
            node.getLLe().apply(this);
        }
        outALeEqualityLogic(node);
    }

    public void inANeqEqualityLogic(ANeqEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outANeqEqualityLogic(ANeqEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseANeqEqualityLogic(ANeqEqualityLogic node)
    {
        inANeqEqualityLogic(node);
        if(node.getLNeq() != null)
        {
            node.getLNeq().apply(this);
        }
        outANeqEqualityLogic(node);
    }

    public void inAGeEqualityLogic(AGeEqualityLogic node)
    {
        defaultIn(node);
    }

    public void outAGeEqualityLogic(AGeEqualityLogic node)
    {
        defaultOut(node);
    }

    public void caseAGeEqualityLogic(AGeEqualityLogic node)
    {
        inAGeEqualityLogic(node);
        if(node.getLGe() != null)
        {
            node.getLGe().apply(this);
        }
        outAGeEqualityLogic(node);
    }

    public void inAIdentifierFactor(AIdentifierFactor node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFactor(AIdentifierFactor node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        inAIdentifierFactor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierFactor(node);
    }

    public void inAIntegerFactor(AIntegerFactor node)
    {
        defaultIn(node);
    }

    public void outAIntegerFactor(AIntegerFactor node)
    {
        defaultOut(node);
    }

    public void caseAIntegerFactor(AIntegerFactor node)
    {
        inAIntegerFactor(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntegerFactor(node);
    }
}
