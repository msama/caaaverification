/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AEmptyFsmPriority extends PFsmPriority
{
    private TPriority _priority_;
    private TEqual _equal_;

    public AEmptyFsmPriority()
    {
    }

    public AEmptyFsmPriority(
        TPriority _priority_,
        TEqual _equal_)
    {
        setPriority(_priority_);

        setEqual(_equal_);

    }
    public Object clone()
    {
        return new AEmptyFsmPriority(
            (TPriority) cloneNode(_priority_),
            (TEqual) cloneNode(_equal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEmptyFsmPriority(this);
    }

    public TPriority getPriority()
    {
        return _priority_;
    }

    public void setPriority(TPriority node)
    {
        if(_priority_ != null)
        {
            _priority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priority_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_priority_)
            + toString(_equal_);
    }

    void removeChild(Node child)
    {
        if(_priority_ == child)
        {
            _priority_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_priority_ == oldChild)
        {
            setPriority((TPriority) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

    }
}
