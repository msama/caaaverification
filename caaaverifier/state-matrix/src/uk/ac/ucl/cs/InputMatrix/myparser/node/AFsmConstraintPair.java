/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AFsmConstraintPair extends PFsmConstraintPair
{
    private TConstraintPair _constraintPair_;
    private TEqual _equal_;
    private PConstraintPairList _constraintPairList_;

    public AFsmConstraintPair()
    {
    }

    public AFsmConstraintPair(
        TConstraintPair _constraintPair_,
        TEqual _equal_,
        PConstraintPairList _constraintPairList_)
    {
        setConstraintPair(_constraintPair_);

        setEqual(_equal_);

        setConstraintPairList(_constraintPairList_);

    }
    public Object clone()
    {
        return new AFsmConstraintPair(
            (TConstraintPair) cloneNode(_constraintPair_),
            (TEqual) cloneNode(_equal_),
            (PConstraintPairList) cloneNode(_constraintPairList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFsmConstraintPair(this);
    }

    public TConstraintPair getConstraintPair()
    {
        return _constraintPair_;
    }

    public void setConstraintPair(TConstraintPair node)
    {
        if(_constraintPair_ != null)
        {
            _constraintPair_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _constraintPair_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PConstraintPairList getConstraintPairList()
    {
        return _constraintPairList_;
    }

    public void setConstraintPairList(PConstraintPairList node)
    {
        if(_constraintPairList_ != null)
        {
            _constraintPairList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _constraintPairList_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_constraintPair_)
            + toString(_equal_)
            + toString(_constraintPairList_);
    }

    void removeChild(Node child)
    {
        if(_constraintPair_ == child)
        {
            _constraintPair_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_constraintPairList_ == child)
        {
            _constraintPairList_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_constraintPair_ == oldChild)
        {
            setConstraintPair((TConstraintPair) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_constraintPairList_ == oldChild)
        {
            setConstraintPairList((PConstraintPairList) newChild);
            return;
        }

    }
}
