/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ASequenceVariableList extends PVariableList
{
    private PVariableList _variableList_;
    private PMyVariable _myVariable_;

    public ASequenceVariableList()
    {
    }

    public ASequenceVariableList(
        PVariableList _variableList_,
        PMyVariable _myVariable_)
    {
        setVariableList(_variableList_);

        setMyVariable(_myVariable_);

    }
    public Object clone()
    {
        return new ASequenceVariableList(
            (PVariableList) cloneNode(_variableList_),
            (PMyVariable) cloneNode(_myVariable_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequenceVariableList(this);
    }

    public PVariableList getVariableList()
    {
        return _variableList_;
    }

    public void setVariableList(PVariableList node)
    {
        if(_variableList_ != null)
        {
            _variableList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _variableList_ = node;
    }

    public PMyVariable getMyVariable()
    {
        return _myVariable_;
    }

    public void setMyVariable(PMyVariable node)
    {
        if(_myVariable_ != null)
        {
            _myVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _myVariable_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_variableList_)
            + toString(_myVariable_);
    }

    void removeChild(Node child)
    {
        if(_variableList_ == child)
        {
            _variableList_ = null;
            return;
        }

        if(_myVariable_ == child)
        {
            _myVariable_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_variableList_ == oldChild)
        {
            setVariableList((PVariableList) newChild);
            return;
        }

        if(_myVariable_ == oldChild)
        {
            setMyVariable((PMyVariable) newChild);
            return;
        }

    }
}
