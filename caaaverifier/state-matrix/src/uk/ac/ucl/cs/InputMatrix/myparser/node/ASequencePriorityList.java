/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ASequencePriorityList extends PPriorityList
{
    private PPriorityList _priorityList_;
    private PMyPriority _myPriority_;

    public ASequencePriorityList()
    {
    }

    public ASequencePriorityList(
        PPriorityList _priorityList_,
        PMyPriority _myPriority_)
    {
        setPriorityList(_priorityList_);

        setMyPriority(_myPriority_);

    }
    public Object clone()
    {
        return new ASequencePriorityList(
            (PPriorityList) cloneNode(_priorityList_),
            (PMyPriority) cloneNode(_myPriority_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequencePriorityList(this);
    }

    public PPriorityList getPriorityList()
    {
        return _priorityList_;
    }

    public void setPriorityList(PPriorityList node)
    {
        if(_priorityList_ != null)
        {
            _priorityList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priorityList_ = node;
    }

    public PMyPriority getMyPriority()
    {
        return _myPriority_;
    }

    public void setMyPriority(PMyPriority node)
    {
        if(_myPriority_ != null)
        {
            _myPriority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _myPriority_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_priorityList_)
            + toString(_myPriority_);
    }

    void removeChild(Node child)
    {
        if(_priorityList_ == child)
        {
            _priorityList_ = null;
            return;
        }

        if(_myPriority_ == child)
        {
            _myPriority_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_priorityList_ == oldChild)
        {
            setPriorityList((PPriorityList) newChild);
            return;
        }

        if(_myPriority_ == oldChild)
        {
            setMyPriority((PMyPriority) newChild);
            return;
        }

    }
}
