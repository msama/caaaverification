/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.lexer;

import java.io.*;
import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new THeadPos(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new2(int line, int pos) { return new TSpace(line, pos); }
    Token new3(int line, int pos) { return new TCrlf(line, pos); }
    Token new4(int line, int pos) { return new TLBrace(line, pos); }
    Token new5(int line, int pos) { return new TRBrace(line, pos); }
    Token new6(int line, int pos) { return new TArrow(line, pos); }
    Token new7(int line, int pos) { return new TLPar(line, pos); }
    Token new8(int line, int pos) { return new TRPar(line, pos); }
    Token new9(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new10(int line, int pos) { return new TComma(line, pos); }
    Token new11(int line, int pos) { return new THyphen(line, pos); }
    Token new12(int line, int pos) { return new TEqual(line, pos); }
    Token new13(String text, int line, int pos) { return new TName(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TState(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TInputAlpha(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TStart(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TForbidden(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TTransitionFunc(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TTrigger(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TPriority(text, line, pos); }
    Token new21(int line, int pos) { return new TContextTypes(line, pos); }
    Token new22(int line, int pos) { return new TContextVariables(line, pos); }
    Token new23(int line, int pos) { return new TPredicateAbbr(line, pos); }
    Token new24(int line, int pos) { return new TPredicatesForState(line, pos); }
    Token new25(int line, int pos) { return new TConstraintPair(line, pos); }
    Token new26(int line, int pos) { return new TVariableAbbr(line, pos); }
    Token new27(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TInt(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TScopeChar(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TMyChar(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TPrioritySettingValue(text, line, pos); }
    Token new33(int line, int pos) { return new TLOr(line, pos); }
    Token new34(int line, int pos) { return new TLAnd(line, pos); }
    Token new35(int line, int pos) { return new TLNot(line, pos); }
    Token new36(int line, int pos) { return new TLIn(line, pos); }
    Token new37(int line, int pos) { return new TLGt(line, pos); }
    Token new38(int line, int pos) { return new TLLt(line, pos); }
    Token new39(int line, int pos) { return new TLEq(line, pos); }
    Token new40(int line, int pos) { return new TLLe(line, pos); }
    Token new41(int line, int pos) { return new TLNeq(line, pos); }
    Token new42(int line, int pos) { return new TLGe(line, pos); }
    Token new43(int line, int pos) { return new TDist(line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 5}, {36, 36, 7}, {37, 39, 5}, {40, 40, 8}, {41, 41, 9}, {42, 43, 5}, {44, 44, 10}, {45, 45, 11}, {46, 47, 5}, {48, 57, 12}, {58, 60, 5}, {61, 61, 13}, {62, 64, 5}, {65, 66, 14}, {67, 67, 15}, {68, 69, 14}, {70, 70, 16}, {71, 72, 14}, {73, 73, 17}, {74, 75, 14}, {76, 76, 18}, {77, 77, 14}, {78, 78, 19}, {79, 79, 14}, {80, 80, 20}, {81, 81, 21}, {82, 82, 22}, {83, 83, 23}, {84, 84, 24}, {85, 85, 14}, {86, 86, 25}, {87, 90, 14}, {91, 91, 5}, {92, 92, 26}, {93, 94, 5}, {95, 95, 27}, {96, 96, 5}, {97, 98, 14}, {99, 99, 28}, {100, 100, 29}, {101, 112, 14}, {113, 113, 30}, {114, 114, 14}, {115, 115, 31}, {116, 122, 14}, {123, 123, 32}, {124, 124, 5}, {125, 125, 33}, {126, 127, 5}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {{32, 33, 34}, {34, 34, 35}, {35, 127, 34}, },
            {{68, 68, 36}, },
            {},
            {},
            {},
            {{62, 62, 37}, },
            {{45, 45, 38}, {48, 57, 39}, },
            {},
            {{45, 45, 40}, {48, 57, 41}, {65, 90, 42}, {95, 95, 43}, {97, 122, 42}, },
            {{45, 95, -16}, {97, 110, 42}, {111, 111, 44}, {112, 122, 42}, },
            {{45, 110, -17}, {111, 111, 45}, {112, 122, 42}, },
            {{45, 95, -16}, {97, 109, 42}, {110, 110, 46}, {111, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 95, -16}, {97, 97, 47}, {98, 122, 42}, },
            {{45, 95, -16}, {97, 113, 42}, {114, 114, 48}, {115, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 95, -16}, {97, 115, 42}, {116, 116, 49}, {117, 122, 42}, },
            {{45, 113, -22}, {114, 114, 50}, {115, 122, 42}, },
            {{45, 95, -16}, {97, 97, 51}, {98, 122, 42}, },
            {{65, 65, 52}, {69, 69, 53}, {71, 71, 54}, {73, 73, 55}, {76, 76, 56}, {78, 78, 57}, {79, 79, 58}, },
            {{45, 122, -16}, },
            {{45, 113, -22}, {114, 114, 59}, {115, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 95, -16}, {97, 111, 42}, {112, 112, 60}, {113, 122, 42}, },
            {},
            {},
            {{32, 127, -8}, },
            {},
            {{105, 105, 61}, },
            {},
            {{48, 57, 62}, },
            {{45, 57, -14}, },
            {{65, 90, 63}, {95, 95, 64}, {97, 122, 63}, },
            {{45, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 109, -19}, {110, 110, 65}, {111, 122, 42}, },
            {{45, 113, -22}, {114, 114, 66}, {115, 122, 42}, },
            {{45, 111, -33}, {112, 112, 67}, {113, 122, 42}, },
            {{45, 95, -16}, {97, 108, 42}, {109, 109, 68}, {110, 122, 42}, },
            {{45, 95, -16}, {97, 100, 42}, {101, 101, 69}, {102, 104, 42}, {105, 105, 70}, {106, 122, 42}, },
            {{45, 95, -16}, {97, 97, 71}, {98, 122, 42}, },
            {{45, 95, -16}, {97, 97, 72}, {98, 104, 42}, {105, 105, 73}, {106, 122, 42}, },
            {{45, 113, -22}, {114, 114, 74}, {115, 122, 42}, },
            {{78, 78, 75}, },
            {{81, 81, 76}, },
            {{69, 69, 77}, {84, 84, 78}, },
            {{78, 78, 79}, },
            {{69, 69, 80}, {84, 84, 81}, },
            {{69, 69, 82}, {79, 79, 83}, },
            {{82, 82, 84}, },
            {{45, 95, -16}, {97, 107, 42}, {108, 108, 85}, {109, 122, 42}, },
            {{45, 95, -16}, {97, 97, 86}, {98, 122, 42}, },
            {{115, 115, 87}, },
            {{48, 57, 88}, },
            {{48, 57, 89}, {65, 90, 90}, {95, 95, 91}, {97, 122, 90}, },
            {{48, 122, -65}, },
            {{45, 95, -16}, {97, 114, 42}, {115, 115, 92}, {116, 116, 93}, {117, 122, 42}, },
            {{45, 95, -16}, {97, 97, 42}, {98, 98, 94}, {99, 122, 42}, },
            {{45, 95, -16}, {97, 116, 42}, {117, 117, 95}, {118, 122, 42}, },
            {{45, 100, -50}, {101, 101, 96}, {102, 122, 42}, },
            {{45, 95, -16}, {97, 99, 42}, {100, 100, 97}, {101, 122, 42}, },
            {{45, 110, -17}, {111, 111, 98}, {112, 122, 42}, },
            {{45, 113, -22}, {114, 114, 99}, {115, 115, 42}, {116, 116, 100}, {117, 122, 42}, },
            {{45, 109, -19}, {110, 110, 101}, {111, 122, 42}, },
            {{45, 95, -16}, {97, 102, 42}, {103, 103, 102}, {104, 122, 42}, },
            {{45, 95, -16}, {97, 104, 42}, {105, 105, 103}, {106, 122, 42}, },
            {{68, 68, 104}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{81, 81, 105}, },
            {{84, 84, 106}, },
            {},
            {{45, 95, -16}, {97, 101, 42}, {102, 102, 107}, {103, 122, 42}, },
            {{45, 95, -16}, {97, 98, 42}, {99, 99, 108}, {100, 122, 42}, },
            {{116, 116, 109}, },
            {{48, 57, 88}, },
            {{48, 122, -65}, },
            {{48, 122, -65}, },
            {{48, 122, -65}, },
            {{45, 115, -25}, {116, 116, 110}, {117, 122, 42}, },
            {{45, 100, -50}, {101, 101, 111}, {102, 122, 42}, },
            {{45, 104, -76}, {105, 105, 112}, {106, 122, 42}, },
            {{45, 115, -25}, {116, 116, 113}, {117, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 104, -76}, {105, 105, 114}, {106, 122, 42}, },
            {{45, 113, -22}, {114, 114, 115}, {115, 122, 42}, },
            {{45, 115, -25}, {116, 116, 116}, {117, 122, 42}, },
            {{45, 100, -50}, {101, 101, 117}, {102, 122, 42}, },
            {{45, 114, -67}, {115, 115, 118}, {116, 122, 42}, },
            {{45, 102, -75}, {103, 103, 119}, {104, 122, 42}, },
            {{45, 95, -16}, {97, 97, 120}, {98, 122, 42}, },
            {},
            {},
            {},
            {{45, 122, -16}, },
            {{45, 100, -50}, {101, 101, 121}, {102, 122, 42}, },
            {{97, 97, 122}, },
            {{45, 113, -22}, {114, 114, 123}, {115, 122, 42}, },
            {{45, 95, -16}, {97, 119, 42}, {120, 120, 124}, {121, 122, 42}, },
            {{45, 99, -71}, {100, 100, 125}, {101, 122, 42}, },
            {{45, 57, -16}, {65, 65, 126}, {66, 90, 42}, {95, 122, -16}, },
            {{45, 98, -88}, {99, 99, 127}, {100, 122, 42}, },
            {{45, 104, -76}, {105, 105, 128}, {106, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 114, -67}, {115, 115, 129}, {116, 122, 42}, },
            {{45, 104, -76}, {105, 105, 130}, {106, 122, 42}, },
            {{45, 100, -50}, {101, 101, 131}, {102, 122, 42}, },
            {{45, 97, -68}, {98, 98, 132}, {99, 122, 42}, },
            {{45, 122, -16}, },
            {{110, 110, 133}, },
            {{45, 95, -16}, {97, 97, 134}, {98, 122, 42}, },
            {{45, 115, -25}, {116, 116, 135}, {117, 122, 42}, },
            {{45, 99, -71}, {100, 100, 136}, {101, 122, 42}, },
            {{45, 107, -61}, {108, 108, 137}, {109, 122, 42}, },
            {{45, 95, -16}, {97, 97, 138}, {98, 122, 42}, },
            {{45, 115, -25}, {116, 116, 139}, {117, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 115, -25}, {116, 116, 140}, {117, 122, 42}, },
            {{45, 113, -22}, {114, 114, 141}, {115, 122, 42}, },
            {{45, 107, -61}, {108, 108, 142}, {109, 122, 42}, },
            {{99, 99, 143}, },
            {{45, 104, -76}, {105, 105, 144}, {106, 122, 42}, },
            {{45, 57, -16}, {65, 83, 42}, {84, 84, 145}, {85, 85, 42}, {86, 86, 146}, {87, 90, 42}, {95, 122, -16}, },
            {{45, 100, -50}, {101, 101, 147}, {102, 122, 42}, },
            {{45, 111, -33}, {112, 112, 148}, {113, 122, 42}, },
            {{45, 115, -25}, {116, 116, 149}, {117, 122, 42}, },
            {{45, 95, -16}, {97, 120, 42}, {121, 121, 150}, {122, 122, 42}, },
            {{45, 104, -76}, {105, 105, 151}, {106, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 100, -50}, {101, 101, 152}, {102, 122, 42}, },
            {{101, 101, 153}, },
            {{45, 109, -19}, {110, 110, 154}, {111, 122, 42}, },
            {{45, 120, -141}, {121, 121, 155}, {122, 122, 42}, },
            {{45, 95, -16}, {97, 97, 156}, {98, 122, 42}, },
            {{45, 109, -19}, {110, 110, 157}, {111, 122, 42}, },
            {{45, 95, -16}, {97, 103, 42}, {104, 104, 158}, {105, 122, 42}, },
            {{45, 100, -50}, {101, 101, 159}, {102, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 110, -17}, {111, 111, 160}, {112, 122, 42}, },
            {{45, 57, -16}, {65, 65, 161}, {66, 122, -115}, },
            {},
            {{45, 115, -25}, {116, 116, 162}, {117, 122, 42}, },
            {{45, 111, -33}, {112, 112, 163}, {113, 122, 42}, },
            {{45, 113, -22}, {114, 114, 164}, {115, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 95, -16}, {97, 97, 165}, {98, 122, 42}, },
            {{45, 57, -16}, {65, 65, 166}, {66, 95, -115}, {97, 114, 42}, {115, 115, 167}, {116, 122, 42}, },
            {{45, 109, -19}, {110, 110, 168}, {111, 122, 42}, },
            {{45, 97, -68}, {98, 98, 169}, {99, 122, 42}, },
            {{45, 57, -16}, {65, 79, 42}, {80, 80, 170}, {81, 90, 42}, {95, 122, -16}, },
            {{45, 100, -50}, {101, 101, 171}, {102, 122, 42}, },
            {{45, 104, -76}, {105, 105, 172}, {106, 122, 42}, },
            {{45, 97, -68}, {98, 98, 173}, {99, 122, 42}, },
            {{45, 97, -68}, {98, 98, 174}, {99, 122, 42}, },
            {{45, 57, -16}, {65, 69, 42}, {70, 70, 175}, {71, 90, 42}, {95, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 97, -68}, {98, 98, 176}, {99, 122, 42}, },
            {{45, 95, -16}, {97, 97, 177}, {98, 122, 42}, },
            {{45, 114, -67}, {115, 115, 178}, {116, 122, 42}, },
            {{45, 95, -16}, {97, 97, 179}, {98, 122, 42}, },
            {{45, 100, -50}, {101, 101, 180}, {102, 122, 42}, },
            {{45, 97, -68}, {98, 98, 181}, {99, 122, 42}, },
            {{45, 110, -17}, {111, 111, 182}, {112, 122, 42}, },
            {{45, 113, -22}, {114, 114, 183}, {115, 122, 42}, },
            {{45, 104, -76}, {105, 105, 184}, {106, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 97, -68}, {98, 98, 185}, {99, 122, 42}, },
            {{45, 115, -25}, {116, 116, 186}, {117, 122, 42}, },
            {{45, 113, -22}, {114, 114, 187}, {115, 122, 42}, },
            {{45, 113, -22}, {114, 114, 188}, {115, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 113, -22}, {114, 114, 189}, {115, 122, 42}, },
            {{45, 107, -61}, {108, 108, 190}, {109, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 57, -16}, {65, 82, 42}, {83, 83, 191}, {84, 90, 42}, {95, 122, -16}, },
            {{45, 122, -16}, },
            {{45, 100, -50}, {101, 101, 192}, {102, 122, 42}, },
            {{45, 115, -25}, {116, 116, 193}, {117, 122, 42}, },
            {{45, 114, -67}, {115, 115, 194}, {116, 122, 42}, },
            {{45, 95, -16}, {97, 97, 195}, {98, 122, 42}, },
            {{45, 122, -16}, },
            {{45, 115, -25}, {116, 116, 196}, {117, 122, 42}, },
            {{45, 100, -50}, {101, 101, 197}, {102, 122, 42}, },
            {{45, 122, -16}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 1, 1, 1, 1, 30, 30, 30, 7, 8, 10, 11, 28, 12, 27, 27, 17, 15, 0, 13, 20, 14, 0, 27, 19, 27, 30, 27, 27, 18, 16, 27, 4, 5, -1, 9, -1, 6, -1, 28, -1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, -1, 27, 27, -1, 29, 29, 29, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1, 39, 42, 37, 36, 40, 38, -1, -1, 33, 27, 27, -1, 29, 29, 29, 29, 27, 27, 27, 27, 13, 27, 27, 27, 27, 27, 27, 27, 34, 41, 35, 3, 27, -1, 27, 27, 27, 27, 27, 27, 16, 27, 27, 27, 27, 2, -1, 27, 27, 27, 27, 27, 27, 14, 27, 27, 27, -1, 27, 27, 27, 27, 27, 27, 27, 19, 27, -1, 27, 27, 27, 27, 27, 27, 20, 27, 27, 43, 27, 27, 27, 17, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 18, 27, 27, 27, 27, 27, 27, 27, 27, 27, 21, 27, 27, 27, 27, 26, 27, 27, 15, 23, 27, 25, 27, 27, 27, 27, 22, 27, 27, 24, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
