/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AFsmStart extends PFsmStart
{
    private TStart _start_;
    private TEqual _equal_;
    private PStartAlpha _startAlpha_;

    public AFsmStart()
    {
    }

    public AFsmStart(
        TStart _start_,
        TEqual _equal_,
        PStartAlpha _startAlpha_)
    {
        setStart(_start_);

        setEqual(_equal_);

        setStartAlpha(_startAlpha_);

    }
    public Object clone()
    {
        return new AFsmStart(
            (TStart) cloneNode(_start_),
            (TEqual) cloneNode(_equal_),
            (PStartAlpha) cloneNode(_startAlpha_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFsmStart(this);
    }

    public TStart getStart()
    {
        return _start_;
    }

    public void setStart(TStart node)
    {
        if(_start_ != null)
        {
            _start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _start_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PStartAlpha getStartAlpha()
    {
        return _startAlpha_;
    }

    public void setStartAlpha(PStartAlpha node)
    {
        if(_startAlpha_ != null)
        {
            _startAlpha_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _startAlpha_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_start_)
            + toString(_equal_)
            + toString(_startAlpha_);
    }

    void removeChild(Node child)
    {
        if(_start_ == child)
        {
            _start_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_startAlpha_ == child)
        {
            _startAlpha_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_start_ == oldChild)
        {
            setStart((TStart) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_startAlpha_ == oldChild)
        {
            setStartAlpha((PStartAlpha) newChild);
            return;
        }

    }
}
