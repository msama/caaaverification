/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.parser;

import uk.ac.ucl.cs.InputMatrix.myparser.lexer.*;
import uk.ac.ucl.cs.InputMatrix.myparser.node.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(1), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(2), node, true); } break;
                    case 3: { Node node = new3(); push(goTo(3), node, true); } break;
                    case 4: { Node node = new4(); push(goTo(4), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(4), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(4), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(4), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(5), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(6), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(7), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(8), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(8), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(8), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(8), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(9), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(10), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(11), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(12), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(13), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(14), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(14), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(15), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(16), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(16), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(17), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(18), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(19), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(20), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(21), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(21), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(22), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(22), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(23), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(24), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(25), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(25), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(26), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(27), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(27), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(28), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(28), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(29), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(30), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(31), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(32), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(33), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(33), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(34), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(35), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(36), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(37), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(38), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(39), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(39), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(40), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(41), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(42), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(43), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(44), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(44), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(45), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(46), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(47), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(48), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(48), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(49), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(49), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(50), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(50), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(51), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(51), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(52), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(53), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(53), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(54), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(54), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(55), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(56), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(57), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(58), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(59), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(59), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(60), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(61), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(62), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(62), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(62), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(63), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(63), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(63), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(64), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(64), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(64), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(64), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(64), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(65), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(66), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(67), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(68), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(69), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(70), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(71), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(72), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(72), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(72), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(72), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(72), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(72), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(73), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(73), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PSpecs node1 = (PSpecs) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        PFsmSpec node1 = (PFsmSpec) pop();
        AFsmSpecs node = new AFsmSpecs(node1);
        return node;
    }

    Node new1()
    {
        PFsmConstraintPair node12 = (PFsmConstraintPair) pop();
        PFsmPredicateAbbr node11 = (PFsmPredicateAbbr) pop();
        PFsmContextVariables node10 = (PFsmContextVariables) pop();
        PFsmContextTypes node9 = (PFsmContextTypes) pop();
        PFsmPriority node8 = (PFsmPriority) pop();
        PFsmTrigger node7 = (PFsmTrigger) pop();
        PFsmTransition node6 = (PFsmTransition) pop();
        PFsmForbidden node5 = (PFsmForbidden) pop();
        PFsmStart node4 = (PFsmStart) pop();
        PFsmInputAlpha node3 = (PFsmInputAlpha) pop();
        PFsmState node2 = (PFsmState) pop();
        PFsmName node1 = (PFsmName) pop();
        AFsmSpec node = new AFsmSpec(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new2()
    {
        TString node3 = (TString) pop();
        TEqual node2 = (TEqual) pop();
        TName node1 = (TName) pop();
        AFsmName node = new AFsmName(node1, node2, node3);
        return node;
    }

    Node new3()
    {
        TRBrace node5 = (TRBrace) pop();
        PStateList node4 = (PStateList) pop();
        TLBrace node3 = (TLBrace) pop();
        TEqual node2 = (TEqual) pop();
        TState node1 = (TState) pop();
        AFsmState node = new AFsmState(node1, node2, node3, node4, node5);
        return node;
    }

    Node new4()
    {
        PStateAlpha node1 = (PStateAlpha) pop();
        ASingleStateList node = new ASingleStateList(node1);
        return node;
    }

    Node new5()
    {
        PStateScope node1 = (PStateScope) pop();
        AScopeStateList node = new AScopeStateList(node1);
        return node;
    }

    Node new6()
    {
        PStateAlpha node3 = (PStateAlpha) pop();
        TComma node2 = (TComma) pop();
        PStateList node1 = (PStateList) pop();
        ASequence1StateList node = new ASequence1StateList(node1, node2, node3);
        return node;
    }

    Node new7()
    {
        PStateScope node3 = (PStateScope) pop();
        TComma node2 = (TComma) pop();
        PStateList node1 = (PStateList) pop();
        ASequence2StateList node = new ASequence2StateList(node1, node2, node3);
        return node;
    }

    Node new8()
    {
        PFactor node1 = (PFactor) pop();
        AStateAlpha node = new AStateAlpha(node1);
        return node;
    }

    Node new9()
    {
        TScopeChar node1 = (TScopeChar) pop();
        AStateScope node = new AStateScope(node1);
        return node;
    }

    Node new10()
    {
        TRBrace node5 = (TRBrace) pop();
        PInputAlphaList node4 = (PInputAlphaList) pop();
        TLBrace node3 = (TLBrace) pop();
        TEqual node2 = (TEqual) pop();
        TInputAlpha node1 = (TInputAlpha) pop();
        AFsmInputAlpha node = new AFsmInputAlpha(node1, node2, node3, node4, node5);
        return node;
    }

    Node new11()
    {
        PMyInputAlpha node1 = (PMyInputAlpha) pop();
        ASingleInputAlphaList node = new ASingleInputAlphaList(node1);
        return node;
    }

    Node new12()
    {
        PInputScope node1 = (PInputScope) pop();
        AScopeInputAlphaList node = new AScopeInputAlphaList(node1);
        return node;
    }

    Node new13()
    {
        PMyInputAlpha node3 = (PMyInputAlpha) pop();
        TComma node2 = (TComma) pop();
        PInputAlphaList node1 = (PInputAlphaList) pop();
        ASequence1InputAlphaList node = new ASequence1InputAlphaList(node1, node2, node3);
        return node;
    }

    Node new14()
    {
        PInputScope node3 = (PInputScope) pop();
        TComma node2 = (TComma) pop();
        PInputAlphaList node1 = (PInputAlphaList) pop();
        ASequence2InputAlphaList node = new ASequence2InputAlphaList(node1, node2, node3);
        return node;
    }

    Node new15()
    {
        PFactor node1 = (PFactor) pop();
        AMyInputAlpha node = new AMyInputAlpha(node1);
        return node;
    }

    Node new16()
    {
        TScopeChar node1 = (TScopeChar) pop();
        AInputScope node = new AInputScope(node1);
        return node;
    }

    Node new17()
    {
        PStartAlpha node3 = (PStartAlpha) pop();
        TEqual node2 = (TEqual) pop();
        TStart node1 = (TStart) pop();
        AFsmStart node = new AFsmStart(node1, node2, node3);
        return node;
    }

    Node new18()
    {
        PFactor node1 = (PFactor) pop();
        AStartAlpha node = new AStartAlpha(node1);
        return node;
    }

    Node new19()
    {
        TRBrace node5 = (TRBrace) pop();
        PForbiddenStateList node4 = (PForbiddenStateList) pop();
        TLBrace node3 = (TLBrace) pop();
        TEqual node2 = (TEqual) pop();
        TForbidden node1 = (TForbidden) pop();
        AFsmForbidden node = new AFsmForbidden(node1, node2, node3, node4, node5);
        return node;
    }

    Node new20()
    {
        PStateList node1 = (PStateList) pop();
        AForbiddenStateList node = new AForbiddenStateList(node1);
        return node;
    }

    Node new21()
    {
        AEmptyForbiddenStateList node = new AEmptyForbiddenStateList();
        return node;
    }

    Node new22()
    {
        PTransitionList node3 = (PTransitionList) pop();
        TEqual node2 = (TEqual) pop();
        TTransitionFunc node1 = (TTransitionFunc) pop();
        AFsmTransition node = new AFsmTransition(node1, node2, node3);
        return node;
    }

    Node new23()
    {
        POneTransition node1 = (POneTransition) pop();
        ASingleTransitionList node = new ASingleTransitionList(node1);
        return node;
    }

    Node new24()
    {
        POneTransition node2 = (POneTransition) pop();
        PTransitionList node1 = (PTransitionList) pop();
        ASequenceTransitionList node = new ASequenceTransitionList(node1, node2);
        return node;
    }

    Node new25()
    {
        PMyStateAlpha2 node7 = (PMyStateAlpha2) pop();
        TArrow node6 = (TArrow) pop();
        TRPar node5 = (TRPar) pop();
        PMyTransitionInputAlpha node4 = (PMyTransitionInputAlpha) pop();
        TComma node3 = (TComma) pop();
        PMyStateAlpha1 node2 = (PMyStateAlpha1) pop();
        TLPar node1 = (TLPar) pop();
        AFsmOneTransition node = new AFsmOneTransition(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new26()
    {
        PFactor node1 = (PFactor) pop();
        AMyStateAlpha1 node = new AMyStateAlpha1(node1);
        return node;
    }

    Node new27()
    {
        PFactor node1 = (PFactor) pop();
        AMyTransitionInputAlpha node = new AMyTransitionInputAlpha(node1);
        return node;
    }

    Node new28()
    {
        PFactor node1 = (PFactor) pop();
        AMyStateAlpha2 node = new AMyStateAlpha2(node1);
        return node;
    }

    Node new29()
    {
        PTriggerList node3 = null;
        TEqual node2 = (TEqual) pop();
        TTrigger node1 = (TTrigger) pop();
        AFsmTrigger node = new AFsmTrigger(node1, node2, node3);
        return node;
    }

    Node new30()
    {
        PTriggerList node3 = (PTriggerList) pop();
        TEqual node2 = (TEqual) pop();
        TTrigger node1 = (TTrigger) pop();
        AFsmTrigger node = new AFsmTrigger(node1, node2, node3);
        return node;
    }

    Node new31()
    {
        PMyTrigger node1 = (PMyTrigger) pop();
        ASingleTriggerList node = new ASingleTriggerList(node1);
        return node;
    }

    Node new32()
    {
        PMyTrigger node2 = (PMyTrigger) pop();
        PTriggerList node1 = (PTriggerList) pop();
        ASequenceTriggerList node = new ASequenceTriggerList(node1, node2);
        return node;
    }

    Node new33()
    {
        TRPar node5 = (TRPar) pop();
        PTriggers node4 = (PTriggers) pop();
        TLPar node3 = (TLPar) pop();
        THyphen node2 = (THyphen) pop();
        PMyTriggerStateAlpha node1 = (PMyTriggerStateAlpha) pop();
        AStatetriggerMyTrigger node = new AStatetriggerMyTrigger(node1, node2, node3, node4, node5);
        return node;
    }

    Node new34()
    {
        PFactor node1 = (PFactor) pop();
        AMyTriggerStateAlpha node = new AMyTriggerStateAlpha(node1);
        return node;
    }

    Node new35()
    {
        PAtrigger node1 = (PAtrigger) pop();
        ASingleTriggers node = new ASingleTriggers(node1);
        return node;
    }

    Node new36()
    {
        PAtrigger node3 = (PAtrigger) pop();
        TComma node2 = (TComma) pop();
        PTriggers node1 = (PTriggers) pop();
        ASequenceTriggers node = new ASequenceTriggers(node1, node2, node3);
        return node;
    }

    Node new37()
    {
        PFactor node1 = (PFactor) pop();
        AAtrigger node = new AAtrigger(node1);
        return node;
    }

    Node new38()
    {
        PPriorityList node3 = (PPriorityList) pop();
        TEqual node2 = (TEqual) pop();
        TPriority node1 = (TPriority) pop();
        AFsmPriority node = new AFsmPriority(node1, node2, node3);
        return node;
    }

    Node new39()
    {
        TEqual node2 = (TEqual) pop();
        TPriority node1 = (TPriority) pop();
        AEmptyFsmPriority node = new AEmptyFsmPriority(node1, node2);
        return node;
    }

    Node new40()
    {
        PMyPriority node1 = (PMyPriority) pop();
        ASinglePriorityList node = new ASinglePriorityList(node1);
        return node;
    }

    Node new41()
    {
        PMyPriority node2 = (PMyPriority) pop();
        PPriorityList node1 = (PPriorityList) pop();
        ASequencePriorityList node = new ASequencePriorityList(node1, node2);
        return node;
    }

    Node new42()
    {
        TRPar node5 = (TRPar) pop();
        PPrioritySetting node4 = (PPrioritySetting) pop();
        TComma node3 = (TComma) pop();
        PMyTriggerAlpha node2 = (PMyTriggerAlpha) pop();
        TLPar node1 = (TLPar) pop();
        ATriggerpriorityMyPriority node = new ATriggerpriorityMyPriority(node1, node2, node3, node4, node5);
        return node;
    }

    Node new43()
    {
        PFactor node1 = (PFactor) pop();
        AMyTriggerAlpha node = new AMyTriggerAlpha(node1);
        return node;
    }

    Node new44()
    {
        TInt node1 = (TInt) pop();
        AIntegerPrioritySetting node = new AIntegerPrioritySetting(node1);
        return node;
    }

    Node new45()
    {
        PTypeList node3 = (PTypeList) pop();
        TEqual node2 = (TEqual) pop();
        TContextTypes node1 = (TContextTypes) pop();
        AFsmContextTypes node = new AFsmContextTypes(node1, node2, node3);
        return node;
    }

    Node new46()
    {
        PMyType node1 = (PMyType) pop();
        ASingleTypeList node = new ASingleTypeList(node1);
        return node;
    }

    Node new47()
    {
        PMyType node2 = (PMyType) pop();
        PTypeList node1 = (PTypeList) pop();
        ASequenceTypeList node = new ASequenceTypeList(node1, node2);
        return node;
    }

    Node new48()
    {
        TRPar node7 = (TRPar) pop();
        PRefreshRate node6 = (PRefreshRate) pop();
        TComma node5 = (TComma) pop();
        PTypeName node4 = (PTypeName) pop();
        TComma node3 = (TComma) pop();
        PTypeAbbr node2 = (PTypeAbbr) pop();
        TLPar node1 = (TLPar) pop();
        AMyType node = new AMyType(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new49()
    {
        PFactor node1 = (PFactor) pop();
        ATypeAbbr node = new ATypeAbbr(node1);
        return node;
    }

    Node new50()
    {
        PFactor node1 = (PFactor) pop();
        ATypeName node = new ATypeName(node1);
        return node;
    }

    Node new51()
    {
        TInt node1 = (TInt) pop();
        AIntegerRefreshRate node = new AIntegerRefreshRate(node1);
        return node;
    }

    Node new52()
    {
        PVariableList node3 = (PVariableList) pop();
        TEqual node2 = (TEqual) pop();
        TContextVariables node1 = (TContextVariables) pop();
        AFsmContextVariables node = new AFsmContextVariables(node1, node2, node3);
        return node;
    }

    Node new53()
    {
        PMyVariable node1 = (PMyVariable) pop();
        ASingleVariableList node = new ASingleVariableList(node1);
        return node;
    }

    Node new54()
    {
        PMyVariable node2 = (PMyVariable) pop();
        PVariableList node1 = (PVariableList) pop();
        ASequenceVariableList node = new ASequenceVariableList(node1, node2);
        return node;
    }

    Node new55()
    {
        TRPar node5 = (TRPar) pop();
        PVarTypeName node4 = (PVarTypeName) pop();
        TComma node3 = (TComma) pop();
        PVariableName node2 = (PVariableName) pop();
        TLPar node1 = (TLPar) pop();
        AMyVariable node = new AMyVariable(node1, node2, node3, node4, node5);
        return node;
    }

    Node new56()
    {
        PFactor node1 = (PFactor) pop();
        AVariableName node = new AVariableName(node1);
        return node;
    }

    Node new57()
    {
        PFactor node1 = (PFactor) pop();
        AVarTypeName node = new AVarTypeName(node1);
        return node;
    }

    Node new58()
    {
        PPredicateList node3 = (PPredicateList) pop();
        TEqual node2 = (TEqual) pop();
        TPredicateAbbr node1 = (TPredicateAbbr) pop();
        AFsmPredicateAbbr node = new AFsmPredicateAbbr(node1, node2, node3);
        return node;
    }

    Node new59()
    {
        PMyPredicate node1 = (PMyPredicate) pop();
        ASinglePredicateList node = new ASinglePredicateList(node1);
        return node;
    }

    Node new60()
    {
        PMyPredicate node2 = (PMyPredicate) pop();
        PPredicateList node1 = (PPredicateList) pop();
        ASequencePredicateList node = new ASequencePredicateList(node1, node2);
        return node;
    }

    Node new61()
    {
        TRPar node5 = (TRPar) pop();
        PPredicateLogic node4 = (PPredicateLogic) pop();
        TComma node3 = (TComma) pop();
        PPredicateName node2 = (PPredicateName) pop();
        TLPar node1 = (TLPar) pop();
        AMyPredicate node = new AMyPredicate(node1, node2, node3, node4, node5);
        return node;
    }

    Node new62()
    {
        PFactor node1 = (PFactor) pop();
        APredNamePredicateName node = new APredNamePredicateName(node1);
        return node;
    }

    Node new63()
    {
        PLogicOrExp node1 = (PLogicOrExp) pop();
        APredicateLogic node = new APredicateLogic(node1);
        return node;
    }

    Node new64()
    {
        PLogicAndExp node3 = (PLogicAndExp) pop();
        TLOr node2 = (TLOr) pop();
        PLogicAndExp node1 = (PLogicAndExp) pop();
        ALogicOrExp node = new ALogicOrExp(node1, node2, node3);
        return node;
    }

    Node new65()
    {
        PLogicAndExp node1 = (PLogicAndExp) pop();
        AEmptyLogicOrExp node = new AEmptyLogicOrExp(node1);
        return node;
    }

    Node new66()
    {
        PUnaryExp node3 = (PUnaryExp) pop();
        TLAnd node2 = (TLAnd) pop();
        PUnaryExp node1 = (PUnaryExp) pop();
        ALogicAndExp node = new ALogicAndExp(node1, node2, node3);
        return node;
    }

    Node new67()
    {
        PUnaryExp node1 = (PUnaryExp) pop();
        AEmptyLogicAndExp node = new AEmptyLogicAndExp(node1);
        return node;
    }

    Node new68()
    {
        PUnaryExp node2 = (PUnaryExp) pop();
        TLNot node1 = (TLNot) pop();
        ANotunaryUnaryExp node = new ANotunaryUnaryExp(node1, node2);
        return node;
    }

    Node new69()
    {
        PPrimaryExp node1 = (PPrimaryExp) pop();
        APrimexpUnaryExp node = new APrimexpUnaryExp(node1);
        return node;
    }

    Node new70()
    {
        PFactor node1 = (PFactor) pop();
        AExpPrimaryExp node = new AExpPrimaryExp(node1);
        return node;
    }

    Node new71()
    {
        PParenExp node1 = (PParenExp) pop();
        AParenexpPrimaryExp node = new AParenexpPrimaryExp(node1);
        return node;
    }

    Node new72()
    {
        TRPar node3 = (TRPar) pop();
        PPredicateLogic node2 = (PPredicateLogic) pop();
        TLPar node1 = (TLPar) pop();
        AParenExp node = new AParenExp(node1, node2, node3);
        return node;
    }

    Node new73()
    {
        PConstraintPairList node3 = null;
        TEqual node2 = (TEqual) pop();
        TConstraintPair node1 = (TConstraintPair) pop();
        AFsmConstraintPair node = new AFsmConstraintPair(node1, node2, node3);
        return node;
    }

    Node new74()
    {
        PConstraintPairList node3 = (PConstraintPairList) pop();
        TEqual node2 = (TEqual) pop();
        TConstraintPair node1 = (TConstraintPair) pop();
        AFsmConstraintPair node = new AFsmConstraintPair(node1, node2, node3);
        return node;
    }

    Node new75()
    {
        PMyConstraintPair node1 = (PMyConstraintPair) pop();
        ASingleConstraintPairList node = new ASingleConstraintPairList(node1);
        return node;
    }

    Node new76()
    {
        PMyConstraintPair node2 = (PMyConstraintPair) pop();
        PConstraintPairList node1 = (PConstraintPairList) pop();
        ASequenceConstraintPairList node = new ASequenceConstraintPairList(node1, node2);
        return node;
    }

    Node new77()
    {
        TRPar node5 = (TRPar) pop();
        PEffectPredicate node4 = (PEffectPredicate) pop();
        TComma node3 = (TComma) pop();
        PConditionPredicate node2 = (PConditionPredicate) pop();
        TLPar node1 = (TLPar) pop();
        AMyConstraintPair node = new AMyConstraintPair(node1, node2, node3, node4, node5);
        return node;
    }

    Node new78()
    {
        PPredicateLogic node1 = (PPredicateLogic) pop();
        AConditionPredicate node = new AConditionPredicate(node1);
        return node;
    }

    Node new79()
    {
        PPredicateLogic node1 = (PPredicateLogic) pop();
        AEffectPredicate node = new AEffectPredicate(node1);
        return node;
    }

    Node new80()
    {
        PAbbrVariableList node3 = (PAbbrVariableList) pop();
        TEqual node2 = (TEqual) pop();
        TVariableAbbr node1 = (TVariableAbbr) pop();
        AFsmVariableAbbr node = new AFsmVariableAbbr(node1, node2, node3);
        return node;
    }

    Node new81()
    {
        POneVariablePair node1 = (POneVariablePair) pop();
        ASingleAbbrVariableList node = new ASingleAbbrVariableList(node1);
        return node;
    }

    Node new82()
    {
        POneVariablePair node2 = (POneVariablePair) pop();
        PAbbrVariableList node1 = (PAbbrVariableList) pop();
        ASequenceAbbrVariableList node = new ASequenceAbbrVariableList(node1, node2);
        return node;
    }

    Node new83()
    {
        TRPar node5 = (TRPar) pop();
        PBinaryLogicExp node4 = (PBinaryLogicExp) pop();
        TComma node3 = (TComma) pop();
        PAbbrVariableName node2 = (PAbbrVariableName) pop();
        TLPar node1 = (TLPar) pop();
        AOneVariablePair node = new AOneVariablePair(node1, node2, node3, node4, node5);
        return node;
    }

    Node new84()
    {
        PFactor node1 = (PFactor) pop();
        AAbbrVariableName node = new AAbbrVariableName(node1);
        return node;
    }

    Node new85()
    {
        PBtSetName node3 = (PBtSetName) pop();
        TLIn node2 = (TLIn) pop();
        PBtClients node1 = (PBtClients) pop();
        ABtBinaryLogicExp node = new ABtBinaryLogicExp(node1, node2, node3);
        return node;
    }

    Node new86()
    {
        PDistanceValue node3 = (PDistanceValue) pop();
        PEqualityLogic node2 = (PEqualityLogic) pop();
        PDistanceFunc node1 = (PDistanceFunc) pop();
        ADistanceBinaryLogicExp node = new ADistanceBinaryLogicExp(node1, node2, node3);
        return node;
    }

    Node new87()
    {
        PEqualityExp node1 = (PEqualityExp) pop();
        ACommonBinaryLogicExp node = new ACommonBinaryLogicExp(node1);
        return node;
    }

    Node new88()
    {
        PRelationExp node3 = (PRelationExp) pop();
        TLEq node2 = (TLEq) pop();
        PRelationExp node1 = (PRelationExp) pop();
        ALogicEqEqualityExp node = new ALogicEqEqualityExp(node1, node2, node3);
        return node;
    }

    Node new89()
    {
        PRelationExp node3 = (PRelationExp) pop();
        TLNeq node2 = (TLNeq) pop();
        PRelationExp node1 = (PRelationExp) pop();
        ALogicNeqEqualityExp node = new ALogicNeqEqualityExp(node1, node2, node3);
        return node;
    }

    Node new90()
    {
        PRelationExp node1 = (PRelationExp) pop();
        AEmptyEqualityExp node = new AEmptyEqualityExp(node1);
        return node;
    }

    Node new91()
    {
        PMyUnaryExp node3 = (PMyUnaryExp) pop();
        TLGt node2 = (TLGt) pop();
        PMyUnaryExp node1 = (PMyUnaryExp) pop();
        ALogicGtRelationExp node = new ALogicGtRelationExp(node1, node2, node3);
        return node;
    }

    Node new92()
    {
        PMyUnaryExp node3 = (PMyUnaryExp) pop();
        TLLt node2 = (TLLt) pop();
        PMyUnaryExp node1 = (PMyUnaryExp) pop();
        ALogicLtRelationExp node = new ALogicLtRelationExp(node1, node2, node3);
        return node;
    }

    Node new93()
    {
        PMyUnaryExp node3 = (PMyUnaryExp) pop();
        TLLe node2 = (TLLe) pop();
        PMyUnaryExp node1 = (PMyUnaryExp) pop();
        ALogicLeRelationExp node = new ALogicLeRelationExp(node1, node2, node3);
        return node;
    }

    Node new94()
    {
        PMyUnaryExp node3 = (PMyUnaryExp) pop();
        TLGe node2 = (TLGe) pop();
        PMyUnaryExp node1 = (PMyUnaryExp) pop();
        ALogicGeRelationExp node = new ALogicGeRelationExp(node1, node2, node3);
        return node;
    }

    Node new95()
    {
        PMyUnaryExp node1 = (PMyUnaryExp) pop();
        AEmptyRelationExp node = new AEmptyRelationExp(node1);
        return node;
    }

    Node new96()
    {
        PFactor node1 = (PFactor) pop();
        AMyUnaryExp node = new AMyUnaryExp(node1);
        return node;
    }

    Node new97()
    {
        TRBrace node3 = (TRBrace) pop();
        PBtValueList node2 = (PBtValueList) pop();
        TLBrace node1 = (TLBrace) pop();
        ABtClients node = new ABtClients(node1, node2, node3);
        return node;
    }

    Node new98()
    {
        PPredicateLogic node1 = (PPredicateLogic) pop();
        ABtExpBtValueList node = new ABtExpBtValueList(node1);
        return node;
    }

    Node new99()
    {
        PFactor node1 = (PFactor) pop();
        ABtSetName node = new ABtSetName(node1);
        return node;
    }

    Node new100()
    {
        TRPar node4 = (TRPar) pop();
        PLocationName node3 = (PLocationName) pop();
        TLPar node2 = (TLPar) pop();
        TDist node1 = (TDist) pop();
        ADistanceFunc node = new ADistanceFunc(node1, node2, node3, node4);
        return node;
    }

    Node new101()
    {
        PFactor node1 = (PFactor) pop();
        ADistanceValue node = new ADistanceValue(node1);
        return node;
    }

    Node new102()
    {
        PFactor node1 = (PFactor) pop();
        ALocationName node = new ALocationName(node1);
        return node;
    }

    Node new103()
    {
        TLGt node1 = (TLGt) pop();
        AGtEqualityLogic node = new AGtEqualityLogic(node1);
        return node;
    }

    Node new104()
    {
        TLLt node1 = (TLLt) pop();
        ALtEqualityLogic node = new ALtEqualityLogic(node1);
        return node;
    }

    Node new105()
    {
        TLEq node1 = (TLEq) pop();
        AEqEqualityLogic node = new AEqEqualityLogic(node1);
        return node;
    }

    Node new106()
    {
        TLLe node1 = (TLLe) pop();
        ALeEqualityLogic node = new ALeEqualityLogic(node1);
        return node;
    }

    Node new107()
    {
        TLNeq node1 = (TLNeq) pop();
        ANeqEqualityLogic node = new ANeqEqualityLogic(node1);
        return node;
    }

    Node new108()
    {
        TLGe node1 = (TLGe) pop();
        AGeEqualityLogic node = new AGeEqualityLogic(node1);
        return node;
    }

    Node new109()
    {
        TId node1 = (TId) pop();
        AIdentifierFactor node = new AIdentifierFactor(node1);
        return node;
    }

    Node new110()
    {
        TInt node1 = (TInt) pop();
        AIntegerFactor node = new AIntegerFactor(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {12, SHIFT, 1}, },
			{{-1, ERROR, 1}, {11, SHIFT, 5}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {13, SHIFT, 6}, },
			{{-1, ERROR, 5}, {8, SHIFT, 8}, },
			{{-1, ERROR, 6}, {11, SHIFT, 9}, },
			{{-1, ERROR, 7}, {14, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 9}, {3, SHIFT, 12}, },
			{{-1, ERROR, 10}, {11, SHIFT, 13}, },
			{{-1, ERROR, 11}, {15, SHIFT, 14}, },
			{{-1, ERROR, 12}, {26, SHIFT, 16}, {27, SHIFT, 17}, {28, SHIFT, 18}, },
			{{-1, ERROR, 13}, {3, SHIFT, 23}, },
			{{-1, ERROR, 14}, {11, SHIFT, 24}, },
			{{-1, ERROR, 15}, {16, SHIFT, 25}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 19}, {4, SHIFT, 27}, {9, SHIFT, 28}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 23}, {26, SHIFT, 16}, {27, SHIFT, 17}, {28, SHIFT, 29}, },
			{{-1, ERROR, 24}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, ERROR, 25}, {11, SHIFT, 36}, },
			{{-1, ERROR, 26}, {17, SHIFT, 37}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 28}, {26, SHIFT, 16}, {27, SHIFT, 17}, {28, SHIFT, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 30}, {4, SHIFT, 41}, {9, SHIFT, 42}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 36}, {3, SHIFT, 43}, },
			{{-1, ERROR, 37}, {11, SHIFT, 44}, },
			{{-1, ERROR, 38}, {18, SHIFT, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 42}, {26, SHIFT, 16}, {27, SHIFT, 17}, {28, SHIFT, 29}, },
			{{-1, REDUCE, 21}, {26, SHIFT, 16}, {27, SHIFT, 17}, {28, SHIFT, 18}, },
			{{-1, ERROR, 44}, {6, SHIFT, 51}, },
			{{-1, ERROR, 45}, {11, SHIFT, 54}, },
			{{-1, ERROR, 46}, {19, SHIFT, 55}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 20}, {9, SHIFT, 28}, },
			{{-1, ERROR, 50}, {4, SHIFT, 57}, },
			{{-1, ERROR, 51}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 22}, {6, SHIFT, 51}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 29}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, ERROR, 55}, {11, SHIFT, 65}, },
			{{-1, ERROR, 56}, {20, SHIFT, 66}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 58}, {9, SHIFT, 68}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 30}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 63}, {10, SHIFT, 70}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 39}, {6, SHIFT, 71}, },
			{{-1, ERROR, 66}, {11, SHIFT, 74}, },
			{{-1, ERROR, 67}, {21, SHIFT, 75}, },
			{{-1, ERROR, 68}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 70}, {6, SHIFT, 79}, },
			{{-1, ERROR, 71}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 38}, {6, SHIFT, 71}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 74}, {6, SHIFT, 83}, },
			{{-1, ERROR, 75}, {11, SHIFT, 86}, },
			{{-1, ERROR, 76}, {22, SHIFT, 87}, },
			{{-1, ERROR, 77}, {7, SHIFT, 89}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 79}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, ERROR, 80}, {9, SHIFT, 93}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 83}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 45}, {6, SHIFT, 83}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 86}, {6, SHIFT, 97}, },
			{{-1, ERROR, 87}, {11, SHIFT, 100}, },
			{{-1, ERROR, 88}, {24, SHIFT, 101}, },
			{{-1, ERROR, 89}, {5, SHIFT, 103}, },
			{{-1, ERROR, 90}, {7, SHIFT, 104}, {9, SHIFT, 105}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 93}, {27, SHIFT, 106}, },
			{{-1, ERROR, 94}, {9, SHIFT, 108}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 97}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 52}, {6, SHIFT, 97}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 100}, {6, SHIFT, 112}, },
			{{-1, ERROR, 101}, {11, SHIFT, 115}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 103}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 105}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 107}, {7, SHIFT, 119}, },
			{{-1, ERROR, 108}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, ERROR, 109}, {9, SHIFT, 122}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 112}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, REDUCE, 58}, {6, SHIFT, 112}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 73}, {6, SHIFT, 126}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 120}, {9, SHIFT, 129}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 122}, {26, SHIFT, 16}, {27, SHIFT, 17}, },
			{{-1, ERROR, 123}, {9, SHIFT, 132}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 126}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, REDUCE, 74}, {6, SHIFT, 126}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 129}, {27, SHIFT, 144}, },
			{{-1, ERROR, 130}, {7, SHIFT, 146}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 132}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, ERROR, 133}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, ERROR, 134}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, {32, SHIFT, 150}, },
			{{-1, REDUCE, 67}, {33, SHIFT, 151}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 141}, {9, SHIFT, 152}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 145}, {7, SHIFT, 153}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 147}, {7, SHIFT, 154}, },
			{{-1, ERROR, 148}, {7, SHIFT, 155}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 150}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, ERROR, 151}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, ERROR, 152}, {6, SHIFT, 133}, {26, SHIFT, 16}, {27, SHIFT, 17}, {34, SHIFT, 134}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 159}, {7, SHIFT, 160}, },
			{{-1, REDUCE, 77}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, },
			{{-1, 7}, },
			{{-1, 19}, {43, 49}, },
			{{-1, 20}, {28, 39}, },
			{{-1, 21}, {28, 40}, },
			{{-1, 11}, },
			{{-1, 30}, },
			{{-1, 31}, {42, 47}, },
			{{-1, 32}, {42, 48}, },
			{{-1, 15}, },
			{{-1, 34}, },
			{{-1, 26}, },
			{{-1, 50}, },
			{{-1, 38}, },
			{{-1, 52}, },
			{{-1, 53}, {52, 60}, },
			{{-1, 58}, },
			{{-1, 77}, },
			{{-1, 116}, },
			{{-1, 46}, },
			{{-1, 61}, },
			{{-1, 62}, {61, 69}, },
			{{-1, 63}, },
			{{-1, 90}, },
			{{-1, 91}, {105, 118}, },
			{{-1, 56}, },
			{{-1, 72}, },
			{{-1, 73}, {72, 82}, },
			{{-1, 80}, },
			{{-1, 107}, },
			{{-1, 67}, },
			{{-1, 84}, },
			{{-1, 85}, {84, 96}, },
			{{-1, 94}, },
			{{-1, 120}, },
			{{-1, 145}, },
			{{-1, 76}, },
			{{-1, 98}, },
			{{-1, 99}, {98, 111}, },
			{{-1, 109}, },
			{{-1, 130}, },
			{{-1, 88}, },
			{{-1, 113}, },
			{{-1, 114}, {113, 125}, },
			{{-1, 123}, },
			{{-1, 135}, {132, 147}, {133, 148}, {152, 158}, },
			{{-1, 136}, },
			{{-1, 137}, {150, 156}, },
			{{-1, 138}, {134, 149}, {151, 157}, },
			{{-1, 139}, },
			{{-1, 140}, },
			{{-1, 102}, },
			{{-1, 127}, },
			{{-1, 128}, {127, 143}, },
			{{-1, 141}, },
			{{-1, 159}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 142}, {12, 22}, {23, 33}, {24, 35}, {28, 22}, {42, 33}, {43, 22}, {51, 59}, {54, 64}, {61, 64}, {68, 78}, {71, 81}, {79, 92}, {83, 95}, {97, 110}, {103, 117}, {105, 92}, {108, 121}, {112, 124}, {122, 131}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: name",
			"expecting: '='",
			"expecting: EOF",
			"expecting: state",
			"expecting: string",
			"expecting: input alpha",
			"expecting: '{'",
			"expecting: start",
			"expecting: id, int, scope char",
			"expecting: forbidden",
			"expecting: '}', '(', ')', ',', '-', forbidden, trigger, '\OR', '\AND'",
			"expecting: '}', ','",
			"expecting: id, int",
			"expecting: transition func",
			"expecting: trigger",
			"expecting: '}', id, int, scope char",
			"expecting: '('",
			"expecting: priority",
			"expecting: '}'",
			"expecting: '(', trigger",
			"expecting: priority, id, int",
			"expecting: 'ContextTypes'",
			"expecting: ','",
			"expecting: '-'",
			"expecting: '(', 'ContextTypes'",
			"expecting: 'ContextVariables'",
			"expecting: 'PredicateAbbr'",
			"expecting: ')'",
			"expecting: '(', 'ContextVariables'",
			"expecting: 'ConstraintPair'",
			"expecting: '->'",
			"expecting: ')', ','",
			"expecting: int",
			"expecting: '(', 'PredicateAbbr'",
			"expecting: '(', 'ConstraintPair'",
			"expecting: '(', EOF",
			"expecting: '(', id, int, '\NOT'",
			"expecting: ')', ',', '\OR'",
			"expecting: ')', ',', '\OR', '\AND'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 1, 7, 8, 6, 1, 9, 10, 10, 11, 11, 11, 11, 11, 8, 12, 1, 13, 5, 8, 11, 11, 11, 11, 11, 9, 9, 6, 1, 14, 11, 11, 7, 8, 15, 16, 1, 17, 11, 11, 11, 18, 12, 19, 19, 20, 1, 21, 13, 22, 22, 19, 20, 20, 23, 23, 24, 1, 25, 12, 20, 16, 12, 24, 24, 16, 1, 26, 27, 27, 12, 22, 22, 24, 12, 28, 28, 16, 1, 29, 30, 31, 31, 31, 32, 22, 22, 28, 12, 33, 33, 16, 1, 2, 12, 20, 12, 27, 27, 12, 22, 22, 33, 12, 34, 34, 35, 19, 19, 31, 24, 22, 22, 12, 22, 22, 34, 36, 35, 35, 32, 27, 27, 36, 36, 36, 22, 31, 37, 38, 38, 38, 22, 38, 35, 27, 27, 33, 27, 27, 38, 36, 36, 36, 28, 34, 38, 31, 37, 27, 27, 35, 
        };*/
}
