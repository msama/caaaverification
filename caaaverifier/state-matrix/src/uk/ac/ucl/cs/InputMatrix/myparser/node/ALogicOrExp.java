/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ALogicOrExp extends PLogicOrExp
{
    private PLogicAndExp _and1_;
    private TLOr _lOr_;
    private PLogicAndExp _and2_;

    public ALogicOrExp()
    {
    }

    public ALogicOrExp(
        PLogicAndExp _and1_,
        TLOr _lOr_,
        PLogicAndExp _and2_)
    {
        setAnd1(_and1_);

        setLOr(_lOr_);

        setAnd2(_and2_);

    }
    public Object clone()
    {
        return new ALogicOrExp(
            (PLogicAndExp) cloneNode(_and1_),
            (TLOr) cloneNode(_lOr_),
            (PLogicAndExp) cloneNode(_and2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicOrExp(this);
    }

    public PLogicAndExp getAnd1()
    {
        return _and1_;
    }

    public void setAnd1(PLogicAndExp node)
    {
        if(_and1_ != null)
        {
            _and1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and1_ = node;
    }

    public TLOr getLOr()
    {
        return _lOr_;
    }

    public void setLOr(TLOr node)
    {
        if(_lOr_ != null)
        {
            _lOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lOr_ = node;
    }

    public PLogicAndExp getAnd2()
    {
        return _and2_;
    }

    public void setAnd2(PLogicAndExp node)
    {
        if(_and2_ != null)
        {
            _and2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_and1_)
            + toString(_lOr_)
            + toString(_and2_);
    }

    void removeChild(Node child)
    {
        if(_and1_ == child)
        {
            _and1_ = null;
            return;
        }

        if(_lOr_ == child)
        {
            _lOr_ = null;
            return;
        }

        if(_and2_ == child)
        {
            _and2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_and1_ == oldChild)
        {
            setAnd1((PLogicAndExp) newChild);
            return;
        }

        if(_lOr_ == oldChild)
        {
            setLOr((TLOr) newChild);
            return;
        }

        if(_and2_ == oldChild)
        {
            setAnd2((PLogicAndExp) newChild);
            return;
        }

    }
}
