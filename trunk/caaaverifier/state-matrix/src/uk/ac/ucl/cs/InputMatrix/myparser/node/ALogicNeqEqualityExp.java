/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ALogicNeqEqualityExp extends PEqualityExp
{
    private PRelationExp _neq1_;
    private TLNeq _lNeq_;
    private PRelationExp _neq2_;

    public ALogicNeqEqualityExp()
    {
    }

    public ALogicNeqEqualityExp(
        PRelationExp _neq1_,
        TLNeq _lNeq_,
        PRelationExp _neq2_)
    {
        setNeq1(_neq1_);

        setLNeq(_lNeq_);

        setNeq2(_neq2_);

    }
    public Object clone()
    {
        return new ALogicNeqEqualityExp(
            (PRelationExp) cloneNode(_neq1_),
            (TLNeq) cloneNode(_lNeq_),
            (PRelationExp) cloneNode(_neq2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicNeqEqualityExp(this);
    }

    public PRelationExp getNeq1()
    {
        return _neq1_;
    }

    public void setNeq1(PRelationExp node)
    {
        if(_neq1_ != null)
        {
            _neq1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _neq1_ = node;
    }

    public TLNeq getLNeq()
    {
        return _lNeq_;
    }

    public void setLNeq(TLNeq node)
    {
        if(_lNeq_ != null)
        {
            _lNeq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lNeq_ = node;
    }

    public PRelationExp getNeq2()
    {
        return _neq2_;
    }

    public void setNeq2(PRelationExp node)
    {
        if(_neq2_ != null)
        {
            _neq2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _neq2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_neq1_)
            + toString(_lNeq_)
            + toString(_neq2_);
    }

    void removeChild(Node child)
    {
        if(_neq1_ == child)
        {
            _neq1_ = null;
            return;
        }

        if(_lNeq_ == child)
        {
            _lNeq_ = null;
            return;
        }

        if(_neq2_ == child)
        {
            _neq2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_neq1_ == oldChild)
        {
            setNeq1((PRelationExp) newChild);
            return;
        }

        if(_lNeq_ == oldChild)
        {
            setLNeq((TLNeq) newChild);
            return;
        }

        if(_neq2_ == oldChild)
        {
            setNeq2((PRelationExp) newChild);
            return;
        }

    }
}
