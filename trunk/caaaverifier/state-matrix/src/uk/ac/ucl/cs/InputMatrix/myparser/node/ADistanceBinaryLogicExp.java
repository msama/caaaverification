/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ADistanceBinaryLogicExp extends PBinaryLogicExp
{
    private PDistanceFunc _distanceFunc_;
    private PEqualityLogic _equalityLogic_;
    private PDistanceValue _distanceValue_;

    public ADistanceBinaryLogicExp()
    {
    }

    public ADistanceBinaryLogicExp(
        PDistanceFunc _distanceFunc_,
        PEqualityLogic _equalityLogic_,
        PDistanceValue _distanceValue_)
    {
        setDistanceFunc(_distanceFunc_);

        setEqualityLogic(_equalityLogic_);

        setDistanceValue(_distanceValue_);

    }
    public Object clone()
    {
        return new ADistanceBinaryLogicExp(
            (PDistanceFunc) cloneNode(_distanceFunc_),
            (PEqualityLogic) cloneNode(_equalityLogic_),
            (PDistanceValue) cloneNode(_distanceValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADistanceBinaryLogicExp(this);
    }

    public PDistanceFunc getDistanceFunc()
    {
        return _distanceFunc_;
    }

    public void setDistanceFunc(PDistanceFunc node)
    {
        if(_distanceFunc_ != null)
        {
            _distanceFunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _distanceFunc_ = node;
    }

    public PEqualityLogic getEqualityLogic()
    {
        return _equalityLogic_;
    }

    public void setEqualityLogic(PEqualityLogic node)
    {
        if(_equalityLogic_ != null)
        {
            _equalityLogic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equalityLogic_ = node;
    }

    public PDistanceValue getDistanceValue()
    {
        return _distanceValue_;
    }

    public void setDistanceValue(PDistanceValue node)
    {
        if(_distanceValue_ != null)
        {
            _distanceValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _distanceValue_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_distanceFunc_)
            + toString(_equalityLogic_)
            + toString(_distanceValue_);
    }

    void removeChild(Node child)
    {
        if(_distanceFunc_ == child)
        {
            _distanceFunc_ = null;
            return;
        }

        if(_equalityLogic_ == child)
        {
            _equalityLogic_ = null;
            return;
        }

        if(_distanceValue_ == child)
        {
            _distanceValue_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_distanceFunc_ == oldChild)
        {
            setDistanceFunc((PDistanceFunc) newChild);
            return;
        }

        if(_equalityLogic_ == oldChild)
        {
            setEqualityLogic((PEqualityLogic) newChild);
            return;
        }

        if(_distanceValue_ == oldChild)
        {
            setDistanceValue((PDistanceValue) newChild);
            return;
        }

    }
}
