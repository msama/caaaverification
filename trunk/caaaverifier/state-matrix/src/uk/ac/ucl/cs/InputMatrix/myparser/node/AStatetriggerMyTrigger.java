/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AStatetriggerMyTrigger extends PMyTrigger
{
    private PMyTriggerStateAlpha _state_;
    private THyphen _hyphen_;
    private TLPar _lp_;
    private PTriggers _multiTriggers_;
    private TRPar _rp_;

    public AStatetriggerMyTrigger()
    {
    }

    public AStatetriggerMyTrigger(
        PMyTriggerStateAlpha _state_,
        THyphen _hyphen_,
        TLPar _lp_,
        PTriggers _multiTriggers_,
        TRPar _rp_)
    {
        setState(_state_);

        setHyphen(_hyphen_);

        setLp(_lp_);

        setMultiTriggers(_multiTriggers_);

        setRp(_rp_);

    }
    public Object clone()
    {
        return new AStatetriggerMyTrigger(
            (PMyTriggerStateAlpha) cloneNode(_state_),
            (THyphen) cloneNode(_hyphen_),
            (TLPar) cloneNode(_lp_),
            (PTriggers) cloneNode(_multiTriggers_),
            (TRPar) cloneNode(_rp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatetriggerMyTrigger(this);
    }

    public PMyTriggerStateAlpha getState()
    {
        return _state_;
    }

    public void setState(PMyTriggerStateAlpha node)
    {
        if(_state_ != null)
        {
            _state_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _state_ = node;
    }

    public THyphen getHyphen()
    {
        return _hyphen_;
    }

    public void setHyphen(THyphen node)
    {
        if(_hyphen_ != null)
        {
            _hyphen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hyphen_ = node;
    }

    public TLPar getLp()
    {
        return _lp_;
    }

    public void setLp(TLPar node)
    {
        if(_lp_ != null)
        {
            _lp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lp_ = node;
    }

    public PTriggers getMultiTriggers()
    {
        return _multiTriggers_;
    }

    public void setMultiTriggers(PTriggers node)
    {
        if(_multiTriggers_ != null)
        {
            _multiTriggers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiTriggers_ = node;
    }

    public TRPar getRp()
    {
        return _rp_;
    }

    public void setRp(TRPar node)
    {
        if(_rp_ != null)
        {
            _rp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rp_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_state_)
            + toString(_hyphen_)
            + toString(_lp_)
            + toString(_multiTriggers_)
            + toString(_rp_);
    }

    void removeChild(Node child)
    {
        if(_state_ == child)
        {
            _state_ = null;
            return;
        }

        if(_hyphen_ == child)
        {
            _hyphen_ = null;
            return;
        }

        if(_lp_ == child)
        {
            _lp_ = null;
            return;
        }

        if(_multiTriggers_ == child)
        {
            _multiTriggers_ = null;
            return;
        }

        if(_rp_ == child)
        {
            _rp_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_state_ == oldChild)
        {
            setState((PMyTriggerStateAlpha) newChild);
            return;
        }

        if(_hyphen_ == oldChild)
        {
            setHyphen((THyphen) newChild);
            return;
        }

        if(_lp_ == oldChild)
        {
            setLp((TLPar) newChild);
            return;
        }

        if(_multiTriggers_ == oldChild)
        {
            setMultiTriggers((PTriggers) newChild);
            return;
        }

        if(_rp_ == oldChild)
        {
            setRp((TRPar) newChild);
            return;
        }

    }
}
