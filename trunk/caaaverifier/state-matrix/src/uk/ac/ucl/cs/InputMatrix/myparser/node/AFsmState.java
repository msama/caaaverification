/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AFsmState extends PFsmState
{
    private TState _state_;
    private TEqual _equal_;
    private TLBrace _lBrace_;
    private PStateList _stateList_;
    private TRBrace _rBrace_;

    public AFsmState()
    {
    }

    public AFsmState(
        TState _state_,
        TEqual _equal_,
        TLBrace _lBrace_,
        PStateList _stateList_,
        TRBrace _rBrace_)
    {
        setState(_state_);

        setEqual(_equal_);

        setLBrace(_lBrace_);

        setStateList(_stateList_);

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AFsmState(
            (TState) cloneNode(_state_),
            (TEqual) cloneNode(_equal_),
            (TLBrace) cloneNode(_lBrace_),
            (PStateList) cloneNode(_stateList_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFsmState(this);
    }

    public TState getState()
    {
        return _state_;
    }

    public void setState(TState node)
    {
        if(_state_ != null)
        {
            _state_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _state_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public PStateList getStateList()
    {
        return _stateList_;
    }

    public void setStateList(PStateList node)
    {
        if(_stateList_ != null)
        {
            _stateList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _stateList_ = node;
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_state_)
            + toString(_equal_)
            + toString(_lBrace_)
            + toString(_stateList_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_state_ == child)
        {
            _state_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_stateList_ == child)
        {
            _stateList_ = null;
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_state_ == oldChild)
        {
            setState((TState) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(_stateList_ == oldChild)
        {
            setStateList((PStateList) newChild);
            return;
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }
}
