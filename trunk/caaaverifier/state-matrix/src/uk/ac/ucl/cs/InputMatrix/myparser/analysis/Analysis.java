/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.analysis;

import uk.ac.ucl.cs.InputMatrix.myparser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAFsmSpecs(AFsmSpecs node);
    void caseAFsmSpec(AFsmSpec node);
    void caseAFsmName(AFsmName node);
    void caseAFsmState(AFsmState node);
    void caseASingleStateList(ASingleStateList node);
    void caseAScopeStateList(AScopeStateList node);
    void caseASequence1StateList(ASequence1StateList node);
    void caseASequence2StateList(ASequence2StateList node);
    void caseAStateAlpha(AStateAlpha node);
    void caseAStateScope(AStateScope node);
    void caseAFsmInputAlpha(AFsmInputAlpha node);
    void caseASingleInputAlphaList(ASingleInputAlphaList node);
    void caseAScopeInputAlphaList(AScopeInputAlphaList node);
    void caseASequence1InputAlphaList(ASequence1InputAlphaList node);
    void caseASequence2InputAlphaList(ASequence2InputAlphaList node);
    void caseAMyInputAlpha(AMyInputAlpha node);
    void caseAInputScope(AInputScope node);
    void caseAFsmStart(AFsmStart node);
    void caseAStartAlpha(AStartAlpha node);
    void caseAFsmForbidden(AFsmForbidden node);
    void caseAForbiddenStateList(AForbiddenStateList node);
    void caseAEmptyForbiddenStateList(AEmptyForbiddenStateList node);
    void caseAFsmTransition(AFsmTransition node);
    void caseASingleTransitionList(ASingleTransitionList node);
    void caseASequenceTransitionList(ASequenceTransitionList node);
    void caseAFsmOneTransition(AFsmOneTransition node);
    void caseAMyStateAlpha1(AMyStateAlpha1 node);
    void caseAMyTransitionInputAlpha(AMyTransitionInputAlpha node);
    void caseAMyStateAlpha2(AMyStateAlpha2 node);
    void caseAFsmTrigger(AFsmTrigger node);
    void caseASingleTriggerList(ASingleTriggerList node);
    void caseASequenceTriggerList(ASequenceTriggerList node);
    void caseAStatetriggerMyTrigger(AStatetriggerMyTrigger node);
    void caseAMyTriggerStateAlpha(AMyTriggerStateAlpha node);
    void caseASingleTriggers(ASingleTriggers node);
    void caseASequenceTriggers(ASequenceTriggers node);
    void caseAAtrigger(AAtrigger node);
    void caseAFsmPriority(AFsmPriority node);
    void caseAEmptyFsmPriority(AEmptyFsmPriority node);
    void caseASinglePriorityList(ASinglePriorityList node);
    void caseASequencePriorityList(ASequencePriorityList node);
    void caseATriggerpriorityMyPriority(ATriggerpriorityMyPriority node);
    void caseAMyTriggerAlpha(AMyTriggerAlpha node);
    void caseAIntegerPrioritySetting(AIntegerPrioritySetting node);
    void caseAFsmContextTypes(AFsmContextTypes node);
    void caseASingleTypeList(ASingleTypeList node);
    void caseASequenceTypeList(ASequenceTypeList node);
    void caseAMyType(AMyType node);
    void caseATypeAbbr(ATypeAbbr node);
    void caseATypeName(ATypeName node);
    void caseAIntegerRefreshRate(AIntegerRefreshRate node);
    void caseAFsmContextVariables(AFsmContextVariables node);
    void caseASingleVariableList(ASingleVariableList node);
    void caseASequenceVariableList(ASequenceVariableList node);
    void caseAMyVariable(AMyVariable node);
    void caseAVariableName(AVariableName node);
    void caseAVarTypeName(AVarTypeName node);
    void caseAFsmPredicateAbbr(AFsmPredicateAbbr node);
    void caseASinglePredicateList(ASinglePredicateList node);
    void caseASequencePredicateList(ASequencePredicateList node);
    void caseAMyPredicate(AMyPredicate node);
    void caseAPredNamePredicateName(APredNamePredicateName node);
    void caseAPredicateLogic(APredicateLogic node);
    void caseALogicOrExp(ALogicOrExp node);
    void caseAEmptyLogicOrExp(AEmptyLogicOrExp node);
    void caseALogicAndExp(ALogicAndExp node);
    void caseAEmptyLogicAndExp(AEmptyLogicAndExp node);
    void caseANotunaryUnaryExp(ANotunaryUnaryExp node);
    void caseAPrimexpUnaryExp(APrimexpUnaryExp node);
    void caseAExpPrimaryExp(AExpPrimaryExp node);
    void caseAParenexpPrimaryExp(AParenexpPrimaryExp node);
    void caseAParenExp(AParenExp node);
    void caseAFsmConstraintPair(AFsmConstraintPair node);
    void caseASingleConstraintPairList(ASingleConstraintPairList node);
    void caseASequenceConstraintPairList(ASequenceConstraintPairList node);
    void caseAMyConstraintPair(AMyConstraintPair node);
    void caseAConditionPredicate(AConditionPredicate node);
    void caseAEffectPredicate(AEffectPredicate node);
    void caseAFsmVariableAbbr(AFsmVariableAbbr node);
    void caseASingleAbbrVariableList(ASingleAbbrVariableList node);
    void caseASequenceAbbrVariableList(ASequenceAbbrVariableList node);
    void caseAOneVariablePair(AOneVariablePair node);
    void caseAAbbrVariableName(AAbbrVariableName node);
    void caseABtBinaryLogicExp(ABtBinaryLogicExp node);
    void caseADistanceBinaryLogicExp(ADistanceBinaryLogicExp node);
    void caseACommonBinaryLogicExp(ACommonBinaryLogicExp node);
    void caseALogicEqEqualityExp(ALogicEqEqualityExp node);
    void caseALogicNeqEqualityExp(ALogicNeqEqualityExp node);
    void caseAEmptyEqualityExp(AEmptyEqualityExp node);
    void caseALogicGtRelationExp(ALogicGtRelationExp node);
    void caseALogicLtRelationExp(ALogicLtRelationExp node);
    void caseALogicLeRelationExp(ALogicLeRelationExp node);
    void caseALogicGeRelationExp(ALogicGeRelationExp node);
    void caseAEmptyRelationExp(AEmptyRelationExp node);
    void caseAMyUnaryExp(AMyUnaryExp node);
    void caseABtClients(ABtClients node);
    void caseABtExpBtValueList(ABtExpBtValueList node);
    void caseABtSetName(ABtSetName node);
    void caseADistanceFunc(ADistanceFunc node);
    void caseADistanceValue(ADistanceValue node);
    void caseALocationName(ALocationName node);
    void caseAGtEqualityLogic(AGtEqualityLogic node);
    void caseALtEqualityLogic(ALtEqualityLogic node);
    void caseAEqEqualityLogic(AEqEqualityLogic node);
    void caseALeEqualityLogic(ALeEqualityLogic node);
    void caseANeqEqualityLogic(ANeqEqualityLogic node);
    void caseAGeEqualityLogic(AGeEqualityLogic node);
    void caseAIdentifierFactor(AIdentifierFactor node);
    void caseAIntegerFactor(AIntegerFactor node);

    void caseTHeadPos(THeadPos node);
    void caseTBlank(TBlank node);
    void caseTSpace(TSpace node);
    void caseTCrlf(TCrlf node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTArrow(TArrow node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTString(TString node);
    void caseTComma(TComma node);
    void caseTHyphen(THyphen node);
    void caseTEqual(TEqual node);
    void caseTName(TName node);
    void caseTState(TState node);
    void caseTInputAlpha(TInputAlpha node);
    void caseTStart(TStart node);
    void caseTForbidden(TForbidden node);
    void caseTTransitionFunc(TTransitionFunc node);
    void caseTTrigger(TTrigger node);
    void caseTPriority(TPriority node);
    void caseTContextTypes(TContextTypes node);
    void caseTContextVariables(TContextVariables node);
    void caseTPredicateAbbr(TPredicateAbbr node);
    void caseTPredicatesForState(TPredicatesForState node);
    void caseTConstraintPair(TConstraintPair node);
    void caseTVariableAbbr(TVariableAbbr node);
    void caseTId(TId node);
    void caseTInt(TInt node);
    void caseTScopeChar(TScopeChar node);
    void caseTMyChar(TMyChar node);
    void caseTNumber(TNumber node);
    void caseTPrioritySettingValue(TPrioritySettingValue node);
    void caseTLOr(TLOr node);
    void caseTLAnd(TLAnd node);
    void caseTLNot(TLNot node);
    void caseTLIn(TLIn node);
    void caseTLGt(TLGt node);
    void caseTLLt(TLLt node);
    void caseTLEq(TLEq node);
    void caseTLLe(TLLe node);
    void caseTLNeq(TLNeq node);
    void caseTLGe(TLGe node);
    void caseTDist(TDist node);
    void caseEOF(EOF node);
}
