/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AOneVariablePair extends POneVariablePair
{
    private TLPar _lPar_;
    private PAbbrVariableName _abbrVariableName_;
    private TComma _comma_;
    private PBinaryLogicExp _binaryLogicExp_;
    private TRPar _rPar_;

    public AOneVariablePair()
    {
    }

    public AOneVariablePair(
        TLPar _lPar_,
        PAbbrVariableName _abbrVariableName_,
        TComma _comma_,
        PBinaryLogicExp _binaryLogicExp_,
        TRPar _rPar_)
    {
        setLPar(_lPar_);

        setAbbrVariableName(_abbrVariableName_);

        setComma(_comma_);

        setBinaryLogicExp(_binaryLogicExp_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new AOneVariablePair(
            (TLPar) cloneNode(_lPar_),
            (PAbbrVariableName) cloneNode(_abbrVariableName_),
            (TComma) cloneNode(_comma_),
            (PBinaryLogicExp) cloneNode(_binaryLogicExp_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOneVariablePair(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PAbbrVariableName getAbbrVariableName()
    {
        return _abbrVariableName_;
    }

    public void setAbbrVariableName(PAbbrVariableName node)
    {
        if(_abbrVariableName_ != null)
        {
            _abbrVariableName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _abbrVariableName_ = node;
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PBinaryLogicExp getBinaryLogicExp()
    {
        return _binaryLogicExp_;
    }

    public void setBinaryLogicExp(PBinaryLogicExp node)
    {
        if(_binaryLogicExp_ != null)
        {
            _binaryLogicExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _binaryLogicExp_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_abbrVariableName_)
            + toString(_comma_)
            + toString(_binaryLogicExp_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_abbrVariableName_ == child)
        {
            _abbrVariableName_ = null;
            return;
        }

        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_binaryLogicExp_ == child)
        {
            _binaryLogicExp_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_abbrVariableName_ == oldChild)
        {
            setAbbrVariableName((PAbbrVariableName) newChild);
            return;
        }

        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_binaryLogicExp_ == oldChild)
        {
            setBinaryLogicExp((PBinaryLogicExp) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}
