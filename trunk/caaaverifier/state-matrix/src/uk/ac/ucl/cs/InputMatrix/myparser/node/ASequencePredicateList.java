/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ASequencePredicateList extends PPredicateList
{
    private PPredicateList _predicateList_;
    private PMyPredicate _myPredicate_;

    public ASequencePredicateList()
    {
    }

    public ASequencePredicateList(
        PPredicateList _predicateList_,
        PMyPredicate _myPredicate_)
    {
        setPredicateList(_predicateList_);

        setMyPredicate(_myPredicate_);

    }
    public Object clone()
    {
        return new ASequencePredicateList(
            (PPredicateList) cloneNode(_predicateList_),
            (PMyPredicate) cloneNode(_myPredicate_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequencePredicateList(this);
    }

    public PPredicateList getPredicateList()
    {
        return _predicateList_;
    }

    public void setPredicateList(PPredicateList node)
    {
        if(_predicateList_ != null)
        {
            _predicateList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _predicateList_ = node;
    }

    public PMyPredicate getMyPredicate()
    {
        return _myPredicate_;
    }

    public void setMyPredicate(PMyPredicate node)
    {
        if(_myPredicate_ != null)
        {
            _myPredicate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _myPredicate_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_predicateList_)
            + toString(_myPredicate_);
    }

    void removeChild(Node child)
    {
        if(_predicateList_ == child)
        {
            _predicateList_ = null;
            return;
        }

        if(_myPredicate_ == child)
        {
            _myPredicate_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_predicateList_ == oldChild)
        {
            setPredicateList((PPredicateList) newChild);
            return;
        }

        if(_myPredicate_ == oldChild)
        {
            setMyPredicate((PMyPredicate) newChild);
            return;
        }

    }
}
