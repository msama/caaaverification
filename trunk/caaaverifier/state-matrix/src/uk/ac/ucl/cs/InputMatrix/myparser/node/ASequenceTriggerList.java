/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ASequenceTriggerList extends PTriggerList
{
    private PTriggerList _triggerList_;
    private PMyTrigger _myTrigger_;

    public ASequenceTriggerList()
    {
    }

    public ASequenceTriggerList(
        PTriggerList _triggerList_,
        PMyTrigger _myTrigger_)
    {
        setTriggerList(_triggerList_);

        setMyTrigger(_myTrigger_);

    }
    public Object clone()
    {
        return new ASequenceTriggerList(
            (PTriggerList) cloneNode(_triggerList_),
            (PMyTrigger) cloneNode(_myTrigger_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequenceTriggerList(this);
    }

    public PTriggerList getTriggerList()
    {
        return _triggerList_;
    }

    public void setTriggerList(PTriggerList node)
    {
        if(_triggerList_ != null)
        {
            _triggerList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _triggerList_ = node;
    }

    public PMyTrigger getMyTrigger()
    {
        return _myTrigger_;
    }

    public void setMyTrigger(PMyTrigger node)
    {
        if(_myTrigger_ != null)
        {
            _myTrigger_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _myTrigger_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_triggerList_)
            + toString(_myTrigger_);
    }

    void removeChild(Node child)
    {
        if(_triggerList_ == child)
        {
            _triggerList_ = null;
            return;
        }

        if(_myTrigger_ == child)
        {
            _myTrigger_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_triggerList_ == oldChild)
        {
            setTriggerList((PTriggerList) newChild);
            return;
        }

        if(_myTrigger_ == oldChild)
        {
            setMyTrigger((PMyTrigger) newChild);
            return;
        }

    }
}
