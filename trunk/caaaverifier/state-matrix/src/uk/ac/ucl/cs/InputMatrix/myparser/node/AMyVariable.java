/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class AMyVariable extends PMyVariable
{
    private TLPar _lPar_;
    private PVariableName _varName_;
    private TComma _comma_;
    private PVarTypeName _shorttypename_;
    private TRPar _rPar_;

    public AMyVariable()
    {
    }

    public AMyVariable(
        TLPar _lPar_,
        PVariableName _varName_,
        TComma _comma_,
        PVarTypeName _shorttypename_,
        TRPar _rPar_)
    {
        setLPar(_lPar_);

        setVarName(_varName_);

        setComma(_comma_);

        setShorttypename(_shorttypename_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new AMyVariable(
            (TLPar) cloneNode(_lPar_),
            (PVariableName) cloneNode(_varName_),
            (TComma) cloneNode(_comma_),
            (PVarTypeName) cloneNode(_shorttypename_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMyVariable(this);
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PVariableName getVarName()
    {
        return _varName_;
    }

    public void setVarName(PVariableName node)
    {
        if(_varName_ != null)
        {
            _varName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _varName_ = node;
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PVarTypeName getShorttypename()
    {
        return _shorttypename_;
    }

    public void setShorttypename(PVarTypeName node)
    {
        if(_shorttypename_ != null)
        {
            _shorttypename_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _shorttypename_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lPar_)
            + toString(_varName_)
            + toString(_comma_)
            + toString(_shorttypename_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_varName_ == child)
        {
            _varName_ = null;
            return;
        }

        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_shorttypename_ == child)
        {
            _shorttypename_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_varName_ == oldChild)
        {
            setVarName((PVariableName) newChild);
            return;
        }

        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_shorttypename_ == oldChild)
        {
            setShorttypename((PVarTypeName) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }
}
