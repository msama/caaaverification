/* This file was generated by SableCC (http://www.sablecc.org/). */

package uk.ac.ucl.cs.InputMatrix.myparser.node;

import java.util.*;
import uk.ac.ucl.cs.InputMatrix.myparser.analysis.*;

public final class ALogicLtRelationExp extends PRelationExp
{
    private PMyUnaryExp _lt1_;
    private TLLt _lLt_;
    private PMyUnaryExp _lt2_;

    public ALogicLtRelationExp()
    {
    }

    public ALogicLtRelationExp(
        PMyUnaryExp _lt1_,
        TLLt _lLt_,
        PMyUnaryExp _lt2_)
    {
        setLt1(_lt1_);

        setLLt(_lLt_);

        setLt2(_lt2_);

    }
    public Object clone()
    {
        return new ALogicLtRelationExp(
            (PMyUnaryExp) cloneNode(_lt1_),
            (TLLt) cloneNode(_lLt_),
            (PMyUnaryExp) cloneNode(_lt2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicLtRelationExp(this);
    }

    public PMyUnaryExp getLt1()
    {
        return _lt1_;
    }

    public void setLt1(PMyUnaryExp node)
    {
        if(_lt1_ != null)
        {
            _lt1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lt1_ = node;
    }

    public TLLt getLLt()
    {
        return _lLt_;
    }

    public void setLLt(TLLt node)
    {
        if(_lLt_ != null)
        {
            _lLt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lLt_ = node;
    }

    public PMyUnaryExp getLt2()
    {
        return _lt2_;
    }

    public void setLt2(PMyUnaryExp node)
    {
        if(_lt2_ != null)
        {
            _lt2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lt2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lt1_)
            + toString(_lLt_)
            + toString(_lt2_);
    }

    void removeChild(Node child)
    {
        if(_lt1_ == child)
        {
            _lt1_ = null;
            return;
        }

        if(_lLt_ == child)
        {
            _lLt_ = null;
            return;
        }

        if(_lt2_ == child)
        {
            _lt2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lt1_ == oldChild)
        {
            setLt1((PMyUnaryExp) newChild);
            return;
        }

        if(_lLt_ == oldChild)
        {
            setLLt((TLLt) newChild);
            return;
        }

        if(_lt2_ == oldChild)
        {
            setLt2((PMyUnaryExp) newChild);
            return;
        }

    }
}
